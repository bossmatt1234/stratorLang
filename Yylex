// -*- Java -*- File generated by the BNF Converter (bnfc 2.9.4.1).

// Lexer definition for use with JFlex
package lang;

import java_cup.runtime.*;
%%
%cup
%unicode
%line
%column
%char
%public
%{
  String pstring = new String();
  final int unknown = -1;
  ComplexSymbolFactory.Location left = new ComplexSymbolFactory.Location(unknown, unknown);
  ComplexSymbolFactory cf = new ComplexSymbolFactory();
  public SymbolFactory getSymbolFactory() { return cf; }

  public int line_num() { return (yyline+1); }
  public ComplexSymbolFactory.Location left_loc() {
    return new ComplexSymbolFactory.Location(yyline+1, yycolumn+1, yychar);
  }
  public ComplexSymbolFactory.Location right_loc() {
    ComplexSymbolFactory.Location left = left_loc();
  return new ComplexSymbolFactory.Location(left.getLine(), left.getColumn()+yylength(), left.getOffset()+yylength());
  }
  public String buff() {return new String(zzBuffer,zzCurrentPos,10).trim();}
%}

LETTER = ({CAPITAL}|{SMALL})
CAPITAL = [A-Z\xC0-\xD6\xD8-\xDE]
SMALL = [a-z\xDF-\xF6\xF8-\xFF]
DIGIT = [0-9]
IDENT = ({LETTER}|{DIGIT}|['_])
%state COMMENT
%state CHAR
%state CHARESC
%state CHAREND
%state STRING
%state ESCAPED
%%
<YYINITIAL>: { return cf.newSymbol("", sym._SYMB_0, left_loc(), right_loc()); }
<YYINITIAL>\( { return cf.newSymbol("", sym._SYMB_1, left_loc(), right_loc()); }
<YYINITIAL>\) { return cf.newSymbol("", sym._SYMB_2, left_loc(), right_loc()); }
<YYINITIAL>\{ { return cf.newSymbol("", sym._SYMB_3, left_loc(), right_loc()); }
<YYINITIAL>\} { return cf.newSymbol("", sym._SYMB_4, left_loc(), right_loc()); }
<YYINITIAL>, { return cf.newSymbol("", sym._SYMB_5, left_loc(), right_loc()); }
<YYINITIAL>\. { return cf.newSymbol("", sym._SYMB_6, left_loc(), right_loc()); }
<YYINITIAL>\[ { return cf.newSymbol("", sym._SYMB_7, left_loc(), right_loc()); }
<YYINITIAL>\] { return cf.newSymbol("", sym._SYMB_8, left_loc(), right_loc()); }
<YYINITIAL>= { return cf.newSymbol("", sym._SYMB_9, left_loc(), right_loc()); }
<YYINITIAL>- { return cf.newSymbol("", sym._SYMB_10, left_loc(), right_loc()); }
<YYINITIAL>\*\* { return cf.newSymbol("", sym._SYMB_11, left_loc(), right_loc()); }
<YYINITIAL>\* { return cf.newSymbol("", sym._SYMB_12, left_loc(), right_loc()); }
<YYINITIAL>\/ { return cf.newSymbol("", sym._SYMB_13, left_loc(), right_loc()); }
<YYINITIAL>% { return cf.newSymbol("", sym._SYMB_14, left_loc(), right_loc()); }
<YYINITIAL>\+ { return cf.newSymbol("", sym._SYMB_15, left_loc(), right_loc()); }
<YYINITIAL>< { return cf.newSymbol("", sym._SYMB_16, left_loc(), right_loc()); }
<YYINITIAL>> { return cf.newSymbol("", sym._SYMB_17, left_loc(), right_loc()); }
<YYINITIAL><= { return cf.newSymbol("", sym._SYMB_18, left_loc(), right_loc()); }
<YYINITIAL>>= { return cf.newSymbol("", sym._SYMB_19, left_loc(), right_loc()); }
<YYINITIAL>== { return cf.newSymbol("", sym._SYMB_20, left_loc(), right_loc()); }
<YYINITIAL>\!= { return cf.newSymbol("", sym._SYMB_21, left_loc(), right_loc()); }
<YYINITIAL>\*= { return cf.newSymbol("", sym._SYMB_22, left_loc(), right_loc()); }
<YYINITIAL>\/= { return cf.newSymbol("", sym._SYMB_23, left_loc(), right_loc()); }
<YYINITIAL>%= { return cf.newSymbol("", sym._SYMB_24, left_loc(), right_loc()); }
<YYINITIAL>\+= { return cf.newSymbol("", sym._SYMB_25, left_loc(), right_loc()); }
<YYINITIAL>-= { return cf.newSymbol("", sym._SYMB_26, left_loc(), right_loc()); }
<YYINITIAL>\+\+ { return cf.newSymbol("", sym._SYMB_27, left_loc(), right_loc()); }
<YYINITIAL>-- { return cf.newSymbol("", sym._SYMB_28, left_loc(), right_loc()); }
<YYINITIAL>AND { return cf.newSymbol("", sym._SYMB_29, left_loc(), right_loc()); }
<YYINITIAL>OR { return cf.newSymbol("", sym._SYMB_30, left_loc(), right_loc()); }
<YYINITIAL>append { return cf.newSymbol("", sym._SYMB_31, left_loc(), right_loc()); }
<YYINITIAL>auto { return cf.newSymbol("", sym._SYMB_32, left_loc(), right_loc()); }
<YYINITIAL>bool { return cf.newSymbol("", sym._SYMB_33, left_loc(), right_loc()); }
<YYINITIAL>break { return cf.newSymbol("", sym._SYMB_34, left_loc(), right_loc()); }
<YYINITIAL>catch { return cf.newSymbol("", sym._SYMB_35, left_loc(), right_loc()); }
<YYINITIAL>char { return cf.newSymbol("", sym._SYMB_36, left_loc(), right_loc()); }
<YYINITIAL>class { return cf.newSymbol("", sym._SYMB_37, left_loc(), right_loc()); }
<YYINITIAL>constructor { return cf.newSymbol("", sym._SYMB_38, left_loc(), right_loc()); }
<YYINITIAL>continue { return cf.newSymbol("", sym._SYMB_39, left_loc(), right_loc()); }
<YYINITIAL>double { return cf.newSymbol("", sym._SYMB_40, left_loc(), right_loc()); }
<YYINITIAL>else { return cf.newSymbol("", sym._SYMB_41, left_loc(), right_loc()); }
<YYINITIAL>false { return cf.newSymbol("", sym._SYMB_42, left_loc(), right_loc()); }
<YYINITIAL>filter { return cf.newSymbol("", sym._SYMB_43, left_loc(), right_loc()); }
<YYINITIAL>finally { return cf.newSymbol("", sym._SYMB_44, left_loc(), right_loc()); }
<YYINITIAL>func { return cf.newSymbol("", sym._SYMB_45, left_loc(), right_loc()); }
<YYINITIAL>function { return cf.newSymbol("", sym._SYMB_46, left_loc(), right_loc()); }
<YYINITIAL>functional { return cf.newSymbol("", sym._SYMB_47, left_loc(), right_loc()); }
<YYINITIAL>if { return cf.newSymbol("", sym._SYMB_48, left_loc(), right_loc()); }
<YYINITIAL>in { return cf.newSymbol("", sym._SYMB_49, left_loc(), right_loc()); }
<YYINITIAL>inherits { return cf.newSymbol("", sym._SYMB_50, left_loc(), right_loc()); }
<YYINITIAL>input { return cf.newSymbol("", sym._SYMB_51, left_loc(), right_loc()); }
<YYINITIAL>int { return cf.newSymbol("", sym._SYMB_52, left_loc(), right_loc()); }
<YYINITIAL>isEmpty { return cf.newSymbol("", sym._SYMB_53, left_loc(), right_loc()); }
<YYINITIAL>isType { return cf.newSymbol("", sym._SYMB_54, left_loc(), right_loc()); }
<YYINITIAL>lambda { return cf.newSymbol("", sym._SYMB_55, left_loc(), right_loc()); }
<YYINITIAL>length { return cf.newSymbol("", sym._SYMB_56, left_loc(), right_loc()); }
<YYINITIAL>map { return cf.newSymbol("", sym._SYMB_57, left_loc(), right_loc()); }
<YYINITIAL>new { return cf.newSymbol("", sym._SYMB_58, left_loc(), right_loc()); }
<YYINITIAL>object { return cf.newSymbol("", sym._SYMB_59, left_loc(), right_loc()); }
<YYINITIAL>paradigm { return cf.newSymbol("", sym._SYMB_60, left_loc(), right_loc()); }
<YYINITIAL>print { return cf.newSymbol("", sym._SYMB_61, left_loc(), right_loc()); }
<YYINITIAL>randomInt { return cf.newSymbol("", sym._SYMB_62, left_loc(), right_loc()); }
<YYINITIAL>range { return cf.newSymbol("", sym._SYMB_63, left_loc(), right_loc()); }
<YYINITIAL>reduce { return cf.newSymbol("", sym._SYMB_64, left_loc(), right_loc()); }
<YYINITIAL>remove { return cf.newSymbol("", sym._SYMB_65, left_loc(), right_loc()); }
<YYINITIAL>repeat { return cf.newSymbol("", sym._SYMB_66, left_loc(), right_loc()); }
<YYINITIAL>return { return cf.newSymbol("", sym._SYMB_67, left_loc(), right_loc()); }
<YYINITIAL>set { return cf.newSymbol("", sym._SYMB_68, left_loc(), right_loc()); }
<YYINITIAL>size { return cf.newSymbol("", sym._SYMB_69, left_loc(), right_loc()); }
<YYINITIAL>string { return cf.newSymbol("", sym._SYMB_70, left_loc(), right_loc()); }
<YYINITIAL>throw { return cf.newSymbol("", sym._SYMB_71, left_loc(), right_loc()); }
<YYINITIAL>toBool { return cf.newSymbol("", sym._SYMB_72, left_loc(), right_loc()); }
<YYINITIAL>toChar { return cf.newSymbol("", sym._SYMB_73, left_loc(), right_loc()); }
<YYINITIAL>toDouble { return cf.newSymbol("", sym._SYMB_74, left_loc(), right_loc()); }
<YYINITIAL>toInt { return cf.newSymbol("", sym._SYMB_75, left_loc(), right_loc()); }
<YYINITIAL>toString { return cf.newSymbol("", sym._SYMB_76, left_loc(), right_loc()); }
<YYINITIAL>true { return cf.newSymbol("", sym._SYMB_77, left_loc(), right_loc()); }
<YYINITIAL>try { return cf.newSymbol("", sym._SYMB_78, left_loc(), right_loc()); }
<YYINITIAL>void { return cf.newSymbol("", sym._SYMB_79, left_loc(), right_loc()); }
<YYINITIAL>while { return cf.newSymbol("", sym._SYMB_80, left_loc(), right_loc()); }
<YYINITIAL>with { return cf.newSymbol("", sym._SYMB_81, left_loc(), right_loc()); }
<YYINITIAL>without { return cf.newSymbol("", sym._SYMB_82, left_loc(), right_loc()); }
<YYINITIAL>"##" { yybegin(COMMENT); }
<COMMENT>"##" { yybegin(YYINITIAL); }
<COMMENT>. { /* skip */ }
<COMMENT>[\n] { /* skip */ }

<YYINITIAL>"\"" { left = left_loc(); yybegin(STRING); }
<STRING>\\ { yybegin(ESCAPED); }
<STRING>\" { String foo = pstring; pstring = new String(); yybegin(YYINITIAL); return cf.newSymbol("", sym._STRING_, left, right_loc(), foo.intern()); }
<STRING>.  { pstring += yytext(); }
<STRING>\r\n|\r|\n { throw new Error("Unterminated string on line " + left.getLine() + " begining at column " + left.getColumn()); }
<STRING><<EOF>> { throw new Error("Unterminated string at EOF, beginning at " + left.getLine() + ":" + left.getColumn()); }
<ESCAPED>n { pstring +=  "\n"; yybegin(STRING); }
<ESCAPED>t  { pstring += "\t"; yybegin(STRING); }
<ESCAPED>r  { pstring += "\r"; yybegin(STRING); }
<ESCAPED>f  { pstring += "\f"; yybegin(STRING); }
<ESCAPED>\" { pstring += "\""; yybegin(STRING); }
<ESCAPED>\\ { pstring += "\\"; yybegin(STRING); }
<ESCAPED>.  { pstring += yytext(); yybegin(STRING); }
<ESCAPED>\r\n|\r|\n { throw new Error("Unterminated string on line " + left.getLine() + " beginning at column " + left.getColumn()); }
<ESCAPED><<EOF>> { throw new Error("Unterminated string at EOF, beginning at " + left.getLine() + ":" + left.getColumn()); }
<YYINITIAL>"'" { left = left_loc(); yybegin(CHAR); }
<CHAR>\\ { yybegin(CHARESC); }
<CHAR>[^'] { yybegin(CHAREND); return cf.newSymbol("", sym._CHAR_, left, right_loc(), Character.valueOf(yytext().charAt(0))); }
<CHAR>\r\n|\r|\n { throw new Error("Unterminated character literal on line " + left.getLine() + " beginning at column " + left.getColumn()); }
<CHAR><<EOF>> { throw new Error("Unterminated character literal at EOF, beginning at " + left.getLine() + ":" + left.getColumn()); }
<CHARESC>n { yybegin(CHAREND); return cf.newSymbol("", sym._CHAR_, left, right_loc(), Character.valueOf('\n')); }
<CHARESC>t { yybegin(CHAREND); return cf.newSymbol("", sym._CHAR_, left, right_loc(), Character.valueOf('\t')); }
<CHARESC>r { yybegin(CHAREND); return cf.newSymbol("", sym._CHAR_, left, right_loc(), Character.valueOf('\r')); }
<CHARESC>f { yybegin(CHAREND); return cf.newSymbol("", sym._CHAR_, left, right_loc(), Character.valueOf('\f')); }
<CHARESC>. { yybegin(CHAREND); return cf.newSymbol("", sym._CHAR_, left, right_loc(), Character.valueOf(yytext().charAt(0))); }
<CHARESC>\r\n|\r|\n { throw new Error("Unterminated character literal on line " + left.getLine() + " beginning at column " + left.getColumn()); }
<CHARESC><<EOF>> { throw new Error("Unterminated character literal at EOF, beginning at " + left.getLine() + ":" + left.getColumn()); }
<CHAREND>"'" {yybegin(YYINITIAL);}
<CHAREND>\r\n|\r|\n { throw new Error("Unterminated character literal on line " + left.getLine() + " beginning at column " + left.getColumn()); }
<CHAREND><<EOF>> { throw new Error("Unterminated character literal at EOF, beginning at " + left.getLine() + ":" + left.getColumn()); }
<YYINITIAL>{DIGIT}+"."{DIGIT}+("e"(\-)?{DIGIT}+)? { return cf.newSymbol("", sym._DOUBLE_, left_loc(), right_loc(), Double.valueOf(yytext())); }
<YYINITIAL>{DIGIT}+ { return cf.newSymbol("", sym._INTEGER_, left_loc(), right_loc(), Integer.valueOf(yytext())); }
<YYINITIAL>{LETTER}{IDENT}* { return cf.newSymbol("", sym._IDENT_, left_loc(), right_loc(), yytext().intern()); }
<YYINITIAL>[ \t\r\n\f] { /* ignore white space. */ }
<<EOF>> { return cf.newSymbol("EOF", sym.EOF, left_loc(), left_loc()); }
. { throw new Error("Illegal Character <"+yytext()+"> at "+(yyline+1)+":"+(yycolumn+1)+"("+yychar+")"); }
