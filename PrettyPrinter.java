// File generated by the BNF Converter (bnfc 2.9.4.1).

package lang;

public class PrettyPrinter
{
  //For certain applications increasing the initial size of the buffer may improve performance.
  private static final int INITIAL_BUFFER_SIZE = 128;
  private static final int INDENT_WIDTH = 2;
  //You may wish to change the parentheses used in precedence.
  private static final String _L_PAREN = new String("(");
  private static final String _R_PAREN = new String(")");
  //You may wish to change render
  private static void render(String s)
  {
    if (s.equals("{"))
    {
       onEmptyLine();
       buf_.append(s);
       _n_ = _n_ + INDENT_WIDTH;
       buf_.append("\n");
       indent();
    }
    else if (s.equals("(") || s.equals("["))
       buf_.append(s);
    else if (s.equals(")") || s.equals("]"))
    {
       removeTrailingWhitespace();
       buf_.append(s);
       buf_.append(" ");
    }
    else if (s.equals("}"))
    {
       _n_ = _n_ - INDENT_WIDTH;
       onEmptyLine();
       buf_.append(s);
       buf_.append("\n");
       indent();
    }
    else if (s.equals(","))
    {
       removeTrailingWhitespace();
       buf_.append(s);
       buf_.append(" ");
    }
    else if (s.equals(";"))
    {
       removeTrailingWhitespace();
       buf_.append(s);
       buf_.append("\n");
       indent();
    }
    else if (s.equals("")) return;
    else if (s.trim().equals(""))
    {
       backup();
       buf_.append(s);
    }
    else
    {
       buf_.append(s);
       buf_.append(" ");
    }
  }


  //  print and show methods are defined for each category.
  public static String print(lang.Absyn.Program foo)
  {
    pp(foo, 0);
    trim();
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String show(lang.Absyn.Program foo)
  {
    sh(foo);
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String print(lang.Absyn.Stm foo)
  {
    pp(foo, 0);
    trim();
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String show(lang.Absyn.Stm foo)
  {
    sh(foo);
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String print(lang.Absyn.Item foo)
  {
    pp(foo, 0);
    trim();
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String show(lang.Absyn.Item foo)
  {
    sh(foo);
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String print(lang.Absyn.ListItem foo)
  {
    pp(foo, 0);
    trim();
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String show(lang.Absyn.ListItem foo)
  {
    sh(foo);
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String print(lang.Absyn.Stm_Initialise foo)
  {
    pp(foo, 0);
    trim();
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String show(lang.Absyn.Stm_Initialise foo)
  {
    sh(foo);
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String print(lang.Absyn.Stm_Declare foo)
  {
    pp(foo, 0);
    trim();
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String show(lang.Absyn.Stm_Declare foo)
  {
    sh(foo);
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String print(lang.Absyn.Stm_Assign foo)
  {
    pp(foo, 0);
    trim();
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String show(lang.Absyn.Stm_Assign foo)
  {
    sh(foo);
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String print(lang.Absyn.Stm_IncrmDecrm foo)
  {
    pp(foo, 0);
    trim();
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String show(lang.Absyn.Stm_IncrmDecrm foo)
  {
    sh(foo);
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String print(lang.Absyn.Stm_Loop foo)
  {
    pp(foo, 0);
    trim();
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String show(lang.Absyn.Stm_Loop foo)
  {
    sh(foo);
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String print(lang.Absyn.If_Stm foo)
  {
    pp(foo, 0);
    trim();
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String show(lang.Absyn.If_Stm foo)
  {
    sh(foo);
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String print(lang.Absyn.Arg foo)
  {
    pp(foo, 0);
    trim();
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String show(lang.Absyn.Arg foo)
  {
    sh(foo);
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String print(lang.Absyn.ListArg foo)
  {
    pp(foo, 0);
    trim();
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String show(lang.Absyn.ListArg foo)
  {
    sh(foo);
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String print(lang.Absyn.ListStm foo)
  {
    pp(foo, 0);
    trim();
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String show(lang.Absyn.ListStm foo)
  {
    sh(foo);
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String print(lang.Absyn.Exp foo)
  {
    pp(foo, 0);
    trim();
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String show(lang.Absyn.Exp foo)
  {
    sh(foo);
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String print(lang.Absyn.ListIdent foo)
  {
    pp(foo, 0);
    trim();
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String show(lang.Absyn.ListIdent foo)
  {
    sh(foo);
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String print(lang.Absyn.Assign_Op foo)
  {
    pp(foo, 0);
    trim();
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String show(lang.Absyn.Assign_Op foo)
  {
    sh(foo);
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String print(lang.Absyn.IncrmDecrm_Op foo)
  {
    pp(foo, 0);
    trim();
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String show(lang.Absyn.IncrmDecrm_Op foo)
  {
    sh(foo);
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String print(lang.Absyn.ListExp foo)
  {
    pp(foo, 0);
    trim();
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String show(lang.Absyn.ListExp foo)
  {
    sh(foo);
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String print(lang.Absyn.FuncType foo)
  {
    pp(foo, 0);
    trim();
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String show(lang.Absyn.FuncType foo)
  {
    sh(foo);
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String print(lang.Absyn.VarType foo)
  {
    pp(foo, 0);
    trim();
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String show(lang.Absyn.VarType foo)
  {
    sh(foo);
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String print(lang.Absyn.TypeCast foo)
  {
    pp(foo, 0);
    trim();
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String show(lang.Absyn.TypeCast foo)
  {
    sh(foo);
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  /***   You shouldn't need to change anything beyond this point.   ***/

  private static void pp(lang.Absyn.Program foo, int _i_)
  {
    if (foo instanceof lang.Absyn.PStms)
    {
       lang.Absyn.PStms _pstms = (lang.Absyn.PStms) foo;
       if (_i_ > 0) render(_L_PAREN);
       pp(_pstms.liststm_, 0);
       if (_i_ > 0) render(_R_PAREN);
    }
    else     if (foo instanceof lang.Absyn.PFunctionalModeStms)
    {
       lang.Absyn.PFunctionalModeStms _pfunctionalmodestms = (lang.Absyn.PFunctionalModeStms) foo;
       if (_i_ > 0) render(_L_PAREN);
       render("paradigm");
       render(":");
       render("functional");
       pp(_pfunctionalmodestms.liststm_, 0);
       if (_i_ > 0) render(_R_PAREN);
    }

  }

  private static void pp(lang.Absyn.Stm foo, int _i_)
  {
    if (foo instanceof lang.Absyn.DefFun)
    {
       lang.Absyn.DefFun _deffun = (lang.Absyn.DefFun) foo;
       if (_i_ > 0) render(_L_PAREN);
       render("function");
       pp(_deffun.functype_, 0);
       pp(_deffun.ident_, 0);
       render("(");
       pp(_deffun.listarg_, 0);
       render(")");
       render("{");
       pp(_deffun.liststm_, 0);
       render("}");
       if (_i_ > 0) render(_R_PAREN);
    }
    else     if (foo instanceof lang.Absyn.DefConstructor)
    {
       lang.Absyn.DefConstructor _defconstructor = (lang.Absyn.DefConstructor) foo;
       if (_i_ > 0) render(_L_PAREN);
       render("constructor");
       pp(_defconstructor.ident_, 0);
       render("(");
       pp(_defconstructor.listarg_, 0);
       render(")");
       render("{");
       pp(_defconstructor.liststm_, 0);
       render("}");
       if (_i_ > 0) render(_R_PAREN);
    }
    else     if (foo instanceof lang.Absyn.DefClass)
    {
       lang.Absyn.DefClass _defclass = (lang.Absyn.DefClass) foo;
       if (_i_ > 0) render(_L_PAREN);
       render("class");
       pp(_defclass.ident_, 0);
       render("{");
       pp(_defclass.liststm_, 0);
       render("}");
       if (_i_ > 0) render(_R_PAREN);
    }
    else     if (foo instanceof lang.Absyn.DefClassInherits)
    {
       lang.Absyn.DefClassInherits _defclassinherits = (lang.Absyn.DefClassInherits) foo;
       if (_i_ > 0) render(_L_PAREN);
       render("class");
       pp(_defclassinherits.ident_1, 0);
       render("inherits");
       pp(_defclassinherits.ident_2, 0);
       render("{");
       pp(_defclassinherits.liststm_, 0);
       render("}");
       if (_i_ > 0) render(_R_PAREN);
    }
    else     if (foo instanceof lang.Absyn.SPrint)
    {
       lang.Absyn.SPrint _sprint = (lang.Absyn.SPrint) foo;
       if (_i_ > 0) render(_L_PAREN);
       render("print");
       pp(_sprint.exp_, 0);
       if (_i_ > 0) render(_R_PAREN);
    }
    else     if (foo instanceof lang.Absyn.SBreak)
    {
       lang.Absyn.SBreak _sbreak = (lang.Absyn.SBreak) foo;
       if (_i_ > 0) render(_L_PAREN);
       render("break");
       if (_i_ > 0) render(_R_PAREN);
    }
    else     if (foo instanceof lang.Absyn.SContinue)
    {
       lang.Absyn.SContinue _scontinue = (lang.Absyn.SContinue) foo;
       if (_i_ > 0) render(_L_PAREN);
       render("continue");
       if (_i_ > 0) render(_R_PAREN);
    }
    else     if (foo instanceof lang.Absyn.InitialiseStm)
    {
       lang.Absyn.InitialiseStm _initialisestm = (lang.Absyn.InitialiseStm) foo;
       if (_i_ > 0) render(_L_PAREN);
       pp(_initialisestm.stm_initialise_, 0);
       if (_i_ > 0) render(_R_PAREN);
    }
    else     if (foo instanceof lang.Absyn.DeclareStm)
    {
       lang.Absyn.DeclareStm _declarestm = (lang.Absyn.DeclareStm) foo;
       if (_i_ > 0) render(_L_PAREN);
       pp(_declarestm.stm_declare_, 0);
       if (_i_ > 0) render(_R_PAREN);
    }
    else     if (foo instanceof lang.Absyn.AssignStm)
    {
       lang.Absyn.AssignStm _assignstm = (lang.Absyn.AssignStm) foo;
       if (_i_ > 0) render(_L_PAREN);
       pp(_assignstm.stm_assign_, 0);
       if (_i_ > 0) render(_R_PAREN);
    }
    else     if (foo instanceof lang.Absyn.LoopStm)
    {
       lang.Absyn.LoopStm _loopstm = (lang.Absyn.LoopStm) foo;
       if (_i_ > 0) render(_L_PAREN);
       pp(_loopstm.stm_loop_, 0);
       if (_i_ > 0) render(_R_PAREN);
    }
    else     if (foo instanceof lang.Absyn.IncrnDecrmStm)
    {
       lang.Absyn.IncrnDecrmStm _incrndecrmstm = (lang.Absyn.IncrnDecrmStm) foo;
       if (_i_ > 0) render(_L_PAREN);
       pp(_incrndecrmstm.stm_incrmdecrm_, 0);
       if (_i_ > 0) render(_R_PAREN);
    }
    else     if (foo instanceof lang.Absyn.SCall)
    {
       lang.Absyn.SCall _scall = (lang.Absyn.SCall) foo;
       if (_i_ > 0) render(_L_PAREN);
       pp(_scall.exp_, 16);
       if (_i_ > 0) render(_R_PAREN);
    }
    else     if (foo instanceof lang.Absyn.SAppend)
    {
       lang.Absyn.SAppend _sappend = (lang.Absyn.SAppend) foo;
       if (_i_ > 0) render(_L_PAREN);
       pp(_sappend.ident_, 0);
       render(".");
       render("append");
       render("(");
       pp(_sappend.exp_, 0);
       render(")");
       if (_i_ > 0) render(_R_PAREN);
    }
    else     if (foo instanceof lang.Absyn.SRemove)
    {
       lang.Absyn.SRemove _sremove = (lang.Absyn.SRemove) foo;
       if (_i_ > 0) render(_L_PAREN);
       pp(_sremove.ident_, 0);
       render(".");
       render("remove");
       render("[");
       pp(_sremove.exp_, 0);
       render("]");
       if (_i_ > 0) render(_R_PAREN);
    }
    else     if (foo instanceof lang.Absyn.SReturn)
    {
       lang.Absyn.SReturn _sreturn = (lang.Absyn.SReturn) foo;
       if (_i_ > 0) render(_L_PAREN);
       render("return");
       pp(_sreturn.exp_, 0);
       if (_i_ > 0) render(_R_PAREN);
    }
    else     if (foo instanceof lang.Absyn.SObjInit)
    {
       lang.Absyn.SObjInit _sobjinit = (lang.Absyn.SObjInit) foo;
       if (_i_ > 0) render(_L_PAREN);
       render("object");
       pp(_sobjinit.ident_1, 0);
       render("=");
       render("new");
       pp(_sobjinit.ident_2, 0);
       render("(");
       pp(_sobjinit.listexp_, 0);
       render(")");
       if (_i_ > 0) render(_R_PAREN);
    }
    else     if (foo instanceof lang.Absyn.SConstInit)
    {
       lang.Absyn.SConstInit _sconstinit = (lang.Absyn.SConstInit) foo;
       if (_i_ > 0) render(_L_PAREN);
       render("const");
       pp(_sconstinit.vartype_, 0);
       pp(_sconstinit.ident_, 0);
       render("=");
       pp(_sconstinit.exp_, 0);
       if (_i_ > 0) render(_R_PAREN);
    }
    else     if (foo instanceof lang.Absyn.IfS)
    {
       lang.Absyn.IfS _ifs = (lang.Absyn.IfS) foo;
       if (_i_ > 0) render(_L_PAREN);
       pp(_ifs.if_stm_, 0);
       if (_i_ > 0) render(_R_PAREN);
    }
    else     if (foo instanceof lang.Absyn.Block)
    {
       lang.Absyn.Block _block = (lang.Absyn.Block) foo;
       if (_i_ > 0) render(_L_PAREN);
       render("{");
       pp(_block.liststm_, 0);
       render("}");
       if (_i_ > 0) render(_R_PAREN);
    }

  }

  private static void pp(lang.Absyn.Item foo, int _i_)
  {
    if (foo instanceof lang.Absyn.LstItem)
    {
       lang.Absyn.LstItem _lstitem = (lang.Absyn.LstItem) foo;
       if (_i_ > 0) render(_L_PAREN);
       pp(_lstitem.exp_, 0);
       if (_i_ > 0) render(_R_PAREN);
    }

  }

  private static void pp(lang.Absyn.ListItem foo, int _i_)
  {
    ppListItem(foo.iterator(), _i_);
  }

  private static void ppListItem(java.util.Iterator<lang.Absyn.Item> it, int _i_)
  {
    if (it.hasNext())
    {
      lang.Absyn.Item el = it.next();
      if (!it.hasNext())
      { /* last */
        pp(el, _i_);
      }
      else
      { /* cons */
        pp(el, _i_); render(","); ppListItem(it, _i_);
      }
    }
  }


  private static void pp(lang.Absyn.Stm_Initialise foo, int _i_)
  {
    if (foo instanceof lang.Absyn.SInit)
    {
       lang.Absyn.SInit _sinit = (lang.Absyn.SInit) foo;
       if (_i_ > 0) render(_L_PAREN);
       pp(_sinit.vartype_, 0);
       pp(_sinit.ident_, 0);
       render("=");
       pp(_sinit.exp_, 0);
       if (_i_ > 0) render(_R_PAREN);
    }

  }

  private static void pp(lang.Absyn.Stm_Declare foo, int _i_)
  {
    if (foo instanceof lang.Absyn.SDecl)
    {
       lang.Absyn.SDecl _sdecl = (lang.Absyn.SDecl) foo;
       if (_i_ > 0) render(_L_PAREN);
       pp(_sdecl.vartype_, 0);
       pp(_sdecl.ident_, 0);
       if (_i_ > 0) render(_R_PAREN);
    }

  }

  private static void pp(lang.Absyn.Stm_Assign foo, int _i_)
  {
    if (foo instanceof lang.Absyn.SAssign)
    {
       lang.Absyn.SAssign _sassign = (lang.Absyn.SAssign) foo;
       if (_i_ > 0) render(_L_PAREN);
       pp(_sassign.ident_, 0);
       pp(_sassign.assign_op_, 0);
       pp(_sassign.exp_, 0);
       if (_i_ > 0) render(_R_PAREN);
    }

  }

  private static void pp(lang.Absyn.Stm_IncrmDecrm foo, int _i_)
  {
    if (foo instanceof lang.Absyn.SIncrmDecrm)
    {
       lang.Absyn.SIncrmDecrm _sincrmdecrm = (lang.Absyn.SIncrmDecrm) foo;
       if (_i_ > 0) render(_L_PAREN);
       pp(_sincrmdecrm.ident_, 0);
       pp(_sincrmdecrm.incrmdecrm_op_, 0);
       if (_i_ > 0) render(_R_PAREN);
    }

  }

  private static void pp(lang.Absyn.Stm_Loop foo, int _i_)
  {
    if (foo instanceof lang.Absyn.SWhile)
    {
       lang.Absyn.SWhile _swhile = (lang.Absyn.SWhile) foo;
       if (_i_ > 0) render(_L_PAREN);
       render("while");
       pp(_swhile.exp_, 0);
       render("{");
       pp(_swhile.liststm_, 0);
       render("}");
       if (_i_ > 0) render(_R_PAREN);
    }
    else     if (foo instanceof lang.Absyn.SPLoopIdent)
    {
       lang.Absyn.SPLoopIdent _sploopident = (lang.Absyn.SPLoopIdent) foo;
       if (_i_ > 0) render(_L_PAREN);
       render("repeat");
       pp(_sploopident.ident_1, 0);
       render("in");
       pp(_sploopident.ident_2, 0);
       render("{");
       pp(_sploopident.liststm_, 0);
       render("}");
       if (_i_ > 0) render(_R_PAREN);
    }
    else     if (foo instanceof lang.Absyn.SPLoopList)
    {
       lang.Absyn.SPLoopList _splooplist = (lang.Absyn.SPLoopList) foo;
       if (_i_ > 0) render(_L_PAREN);
       render("repeat");
       pp(_splooplist.ident_, 0);
       render("in");
       render("[");
       pp(_splooplist.listitem_, 0);
       render("]");
       render("{");
       pp(_splooplist.liststm_, 0);
       render("}");
       if (_i_ > 0) render(_R_PAREN);
    }
    else     if (foo instanceof lang.Absyn.SPLoopRangeStart)
    {
       lang.Absyn.SPLoopRangeStart _splooprangestart = (lang.Absyn.SPLoopRangeStart) foo;
       if (_i_ > 0) render(_L_PAREN);
       render("repeat");
       pp(_splooprangestart.ident_, 0);
       render("in");
       render("range");
       render("(");
       pp(_splooprangestart.exp_, 0);
       render(")");
       render("{");
       pp(_splooprangestart.liststm_, 0);
       render("}");
       if (_i_ > 0) render(_R_PAREN);
    }
    else     if (foo instanceof lang.Absyn.SPLoopRangeStartStop)
    {
       lang.Absyn.SPLoopRangeStartStop _splooprangestartstop = (lang.Absyn.SPLoopRangeStartStop) foo;
       if (_i_ > 0) render(_L_PAREN);
       render("repeat");
       pp(_splooprangestartstop.ident_, 0);
       render("in");
       render("range");
       render("(");
       pp(_splooprangestartstop.exp_1, 0);
       render(",");
       pp(_splooprangestartstop.exp_2, 0);
       render(")");
       render("{");
       pp(_splooprangestartstop.liststm_, 0);
       render("}");
       if (_i_ > 0) render(_R_PAREN);
    }
    else     if (foo instanceof lang.Absyn.SPLoopRangeStartStopEnd)
    {
       lang.Absyn.SPLoopRangeStartStopEnd _splooprangestartstopend = (lang.Absyn.SPLoopRangeStartStopEnd) foo;
       if (_i_ > 0) render(_L_PAREN);
       render("repeat");
       pp(_splooprangestartstopend.ident_, 0);
       render("in");
       render("range");
       render("(");
       pp(_splooprangestartstopend.exp_1, 0);
       render(",");
       pp(_splooprangestartstopend.exp_2, 0);
       render(",");
       pp(_splooprangestartstopend.exp_3, 0);
       render(")");
       render("{");
       pp(_splooprangestartstopend.liststm_, 0);
       render("}");
       if (_i_ > 0) render(_R_PAREN);
    }
    else     if (foo instanceof lang.Absyn.SCLoop)
    {
       lang.Absyn.SCLoop _scloop = (lang.Absyn.SCLoop) foo;
       if (_i_ > 0) render(_L_PAREN);
       render("repeat");
       pp(_scloop.stm_initialise_, 0);
       render(",");
       pp(_scloop.exp_, 0);
       render(",");
       pp(_scloop.stm_incrmdecrm_, 0);
       render("{");
       pp(_scloop.liststm_, 0);
       render("}");
       if (_i_ > 0) render(_R_PAREN);
    }
    else     if (foo instanceof lang.Absyn.SCLoopAssign)
    {
       lang.Absyn.SCLoopAssign _scloopassign = (lang.Absyn.SCLoopAssign) foo;
       if (_i_ > 0) render(_L_PAREN);
       render("repeat");
       pp(_scloopassign.stm_initialise_, 0);
       render(",");
       pp(_scloopassign.exp_, 0);
       render(",");
       pp(_scloopassign.stm_assign_, 0);
       render("{");
       pp(_scloopassign.liststm_, 0);
       render("}");
       if (_i_ > 0) render(_R_PAREN);
    }

  }

  private static void pp(lang.Absyn.If_Stm foo, int _i_)
  {
    if (foo instanceof lang.Absyn.SIf)
    {
       lang.Absyn.SIf _sif = (lang.Absyn.SIf) foo;
       if (_i_ > 0) render(_L_PAREN);
       render("if");
       pp(_sif.exp_, 0);
       render("{");
       pp(_sif.liststm_, 0);
       render("}");
       if (_i_ > 0) render(_R_PAREN);
    }
    else     if (foo instanceof lang.Absyn.SIfElse)
    {
       lang.Absyn.SIfElse _sifelse = (lang.Absyn.SIfElse) foo;
       if (_i_ > 0) render(_L_PAREN);
       render("if");
       pp(_sifelse.exp_, 0);
       render("{");
       pp(_sifelse.liststm_1, 0);
       render("}");
       render("else");
       render("{");
       pp(_sifelse.liststm_2, 0);
       render("}");
       if (_i_ > 0) render(_R_PAREN);
    }
    else     if (foo instanceof lang.Absyn.SIfElseIf)
    {
       lang.Absyn.SIfElseIf _sifelseif = (lang.Absyn.SIfElseIf) foo;
       if (_i_ > 0) render(_L_PAREN);
       render("if");
       pp(_sifelseif.exp_, 0);
       render("{");
       pp(_sifelseif.liststm_, 0);
       render("}");
       render("else");
       pp(_sifelseif.if_stm_, 0);
       if (_i_ > 0) render(_R_PAREN);
    }

  }

  private static void pp(lang.Absyn.Arg foo, int _i_)
  {
    if (foo instanceof lang.Absyn.ArgDecl)
    {
       lang.Absyn.ArgDecl _argdecl = (lang.Absyn.ArgDecl) foo;
       if (_i_ > 0) render(_L_PAREN);
       pp(_argdecl.vartype_, 0);
       pp(_argdecl.ident_, 0);
       if (_i_ > 0) render(_R_PAREN);
    }

  }

  private static void pp(lang.Absyn.ListArg foo, int _i_)
  {
    ppListArg(foo.iterator(), _i_);
  }

  private static void ppListArg(java.util.Iterator<lang.Absyn.Arg> it, int _i_)
  {
    if (it.hasNext())
    {
      lang.Absyn.Arg el = it.next();
      if (!it.hasNext())
      { /* last */
        pp(el, _i_);
      }
      else
      { /* cons */
        pp(el, _i_); render(","); ppListArg(it, _i_);
      }
    }
  }


  private static void pp(lang.Absyn.ListStm foo, int _i_)
  {
    ppListStm(foo.iterator(), _i_);
  }

  private static void ppListStm(java.util.Iterator<lang.Absyn.Stm> it, int _i_)
  {
    if (it.hasNext())
    { /* cons */
      lang.Absyn.Stm el = it.next();
      pp(el, _i_); render(""); ppListStm(it, _i_);
    }
  }


  private static void pp(lang.Absyn.Exp foo, int _i_)
  {
    if (foo instanceof lang.Absyn.EInt)
    {
       lang.Absyn.EInt _eint = (lang.Absyn.EInt) foo;
       if (_i_ > 15) render(_L_PAREN);
       pp(_eint.integer_, 0);
       if (_i_ > 15) render(_R_PAREN);
    }
    else     if (foo instanceof lang.Absyn.ENegInt)
    {
       lang.Absyn.ENegInt _enegint = (lang.Absyn.ENegInt) foo;
       if (_i_ > 15) render(_L_PAREN);
       render("-");
       pp(_enegint.integer_, 0);
       if (_i_ > 15) render(_R_PAREN);
    }
    else     if (foo instanceof lang.Absyn.EChar)
    {
       lang.Absyn.EChar _echar = (lang.Absyn.EChar) foo;
       if (_i_ > 15) render(_L_PAREN);
       pp(_echar.char_, 0);
       if (_i_ > 15) render(_R_PAREN);
    }
    else     if (foo instanceof lang.Absyn.EDouble)
    {
       lang.Absyn.EDouble _edouble = (lang.Absyn.EDouble) foo;
       if (_i_ > 15) render(_L_PAREN);
       pp(_edouble.double_, 0);
       if (_i_ > 15) render(_R_PAREN);
    }
    else     if (foo instanceof lang.Absyn.ENegDouble)
    {
       lang.Absyn.ENegDouble _enegdouble = (lang.Absyn.ENegDouble) foo;
       if (_i_ > 15) render(_L_PAREN);
       render("-");
       pp(_enegdouble.double_, 0);
       if (_i_ > 15) render(_R_PAREN);
    }
    else     if (foo instanceof lang.Absyn.EString)
    {
       lang.Absyn.EString _estring = (lang.Absyn.EString) foo;
       if (_i_ > 15) render(_L_PAREN);
       printQuoted(_estring.string_);
       if (_i_ > 15) render(_R_PAREN);
    }
    else     if (foo instanceof lang.Absyn.ETrue)
    {
       lang.Absyn.ETrue _etrue = (lang.Absyn.ETrue) foo;
       if (_i_ > 15) render(_L_PAREN);
       render("true");
       if (_i_ > 15) render(_R_PAREN);
    }
    else     if (foo instanceof lang.Absyn.EFalse)
    {
       lang.Absyn.EFalse _efalse = (lang.Absyn.EFalse) foo;
       if (_i_ > 15) render(_L_PAREN);
       render("false");
       if (_i_ > 15) render(_R_PAREN);
    }
    else     if (foo instanceof lang.Absyn.EId)
    {
       lang.Absyn.EId _eid = (lang.Absyn.EId) foo;
       if (_i_ > 15) render(_L_PAREN);
       pp(_eid.ident_, 0);
       if (_i_ > 15) render(_R_PAREN);
    }
    else     if (foo instanceof lang.Absyn.EListItem)
    {
       lang.Absyn.EListItem _elistitem = (lang.Absyn.EListItem) foo;
       if (_i_ > 15) render(_L_PAREN);
       pp(_elistitem.ident_, 0);
       render("[");
       pp(_elistitem.exp_, 0);
       render("]");
       if (_i_ > 15) render(_R_PAREN);
    }
    else     if (foo instanceof lang.Absyn.EListWith)
    {
       lang.Absyn.EListWith _elistwith = (lang.Absyn.EListWith) foo;
       if (_i_ > 15) render(_L_PAREN);
       pp(_elistwith.ident_, 0);
       render(".");
       render("with");
       render("(");
       pp(_elistwith.exp_, 0);
       render(")");
       if (_i_ > 15) render(_R_PAREN);
    }
    else     if (foo instanceof lang.Absyn.EListWithout)
    {
       lang.Absyn.EListWithout _elistwithout = (lang.Absyn.EListWithout) foo;
       if (_i_ > 15) render(_L_PAREN);
       pp(_elistwithout.ident_, 0);
       render(".");
       render("without");
       render("[");
       pp(_elistwithout.exp_, 0);
       render("]");
       if (_i_ > 15) render(_R_PAREN);
    }
    else     if (foo instanceof lang.Absyn.EList)
    {
       lang.Absyn.EList _elist = (lang.Absyn.EList) foo;
       if (_i_ > 15) render(_L_PAREN);
       render("[");
       pp(_elist.listitem_, 0);
       render("]");
       if (_i_ > 15) render(_R_PAREN);
    }
    else     if (foo instanceof lang.Absyn.EListSize)
    {
       lang.Absyn.EListSize _elistsize = (lang.Absyn.EListSize) foo;
       if (_i_ > 15) render(_L_PAREN);
       pp(_elistsize.ident_, 0);
       render(".");
       render("size");
       if (_i_ > 15) render(_R_PAREN);
    }
    else     if (foo instanceof lang.Absyn.EInput)
    {
       lang.Absyn.EInput _einput = (lang.Absyn.EInput) foo;
       if (_i_ > 15) render(_L_PAREN);
       render("input");
       render("(");
       render(")");
       if (_i_ > 15) render(_R_PAREN);
    }
    else     if (foo instanceof lang.Absyn.EStrLength)
    {
       lang.Absyn.EStrLength _estrlength = (lang.Absyn.EStrLength) foo;
       if (_i_ > 15) render(_L_PAREN);
       pp(_estrlength.ident_, 0);
       render(".");
       render("length");
       if (_i_ > 15) render(_R_PAREN);
    }
    else     if (foo instanceof lang.Absyn.ERand)
    {
       lang.Absyn.ERand _erand = (lang.Absyn.ERand) foo;
       if (_i_ > 15) render(_L_PAREN);
       render("randomInt");
       render("(");
       pp(_erand.integer_, 0);
       render(")");
       if (_i_ > 15) render(_R_PAREN);
    }
    else     if (foo instanceof lang.Absyn.ETypeCast)
    {
       lang.Absyn.ETypeCast _etypecast = (lang.Absyn.ETypeCast) foo;
       if (_i_ > 16) render(_L_PAREN);
       pp(_etypecast.ident_, 0);
       render(".");
       pp(_etypecast.typecast_, 0);
       if (_i_ > 16) render(_R_PAREN);
    }
    else     if (foo instanceof lang.Absyn.ELambda)
    {
       lang.Absyn.ELambda _elambda = (lang.Absyn.ELambda) foo;
       if (_i_ > 16) render(_L_PAREN);
       render("lambda");
       render("(");
       pp(_elambda.listarg_, 0);
       render(")");
       render("{");
       pp(_elambda.liststm_, 0);
       render("}");
       if (_i_ > 16) render(_R_PAREN);
    }
    else     if (foo instanceof lang.Absyn.EMapIdent)
    {
       lang.Absyn.EMapIdent _emapident = (lang.Absyn.EMapIdent) foo;
       if (_i_ > 16) render(_L_PAREN);
       render("map");
       render("(");
       pp(_emapident.exp_, 0);
       render(",");
       pp(_emapident.ident_, 0);
       render(")");
       if (_i_ > 16) render(_R_PAREN);
    }
    else     if (foo instanceof lang.Absyn.EMapList)
    {
       lang.Absyn.EMapList _emaplist = (lang.Absyn.EMapList) foo;
       if (_i_ > 16) render(_L_PAREN);
       render("map");
       render("(");
       pp(_emaplist.exp_, 0);
       render(",");
       render("[");
       pp(_emaplist.listitem_, 0);
       render("]");
       render(")");
       if (_i_ > 16) render(_R_PAREN);
    }
    else     if (foo instanceof lang.Absyn.EFilterIdent)
    {
       lang.Absyn.EFilterIdent _efilterident = (lang.Absyn.EFilterIdent) foo;
       if (_i_ > 16) render(_L_PAREN);
       render("filter");
       render("(");
       pp(_efilterident.exp_, 0);
       render(",");
       pp(_efilterident.ident_, 0);
       render(")");
       if (_i_ > 16) render(_R_PAREN);
    }
    else     if (foo instanceof lang.Absyn.EFilterList)
    {
       lang.Absyn.EFilterList _efilterlist = (lang.Absyn.EFilterList) foo;
       if (_i_ > 16) render(_L_PAREN);
       render("filter");
       render("(");
       pp(_efilterlist.exp_, 0);
       render(",");
       render("[");
       pp(_efilterlist.listitem_, 0);
       render("]");
       render(")");
       if (_i_ > 16) render(_R_PAREN);
    }
    else     if (foo instanceof lang.Absyn.EReduceIdent)
    {
       lang.Absyn.EReduceIdent _ereduceident = (lang.Absyn.EReduceIdent) foo;
       if (_i_ > 16) render(_L_PAREN);
       render("reduce");
       render("(");
       pp(_ereduceident.exp_, 0);
       render(",");
       pp(_ereduceident.ident_, 0);
       render(")");
       if (_i_ > 16) render(_R_PAREN);
    }
    else     if (foo instanceof lang.Absyn.EReduceList)
    {
       lang.Absyn.EReduceList _ereducelist = (lang.Absyn.EReduceList) foo;
       if (_i_ > 16) render(_L_PAREN);
       render("reduce");
       render("(");
       pp(_ereducelist.exp_, 0);
       render(",");
       render("[");
       pp(_ereducelist.listitem_, 0);
       render("]");
       render(")");
       if (_i_ > 16) render(_R_PAREN);
    }
    else     if (foo instanceof lang.Absyn.ESelect)
    {
       lang.Absyn.ESelect _eselect = (lang.Absyn.ESelect) foo;
       if (_i_ > 16) render(_L_PAREN);
       pp(_eselect.ident_1, 0);
       render(".");
       pp(_eselect.ident_2, 0);
       if (_i_ > 16) render(_R_PAREN);
    }
    else     if (foo instanceof lang.Absyn.ESelectListItem)
    {
       lang.Absyn.ESelectListItem _eselectlistitem = (lang.Absyn.ESelectListItem) foo;
       if (_i_ > 16) render(_L_PAREN);
       pp(_eselectlistitem.ident_1, 0);
       render(".");
       pp(_eselectlistitem.ident_2, 0);
       render("[");
       pp(_eselectlistitem.exp_, 0);
       render("]");
       if (_i_ > 16) render(_R_PAREN);
    }
    else     if (foo instanceof lang.Absyn.ECall)
    {
       lang.Absyn.ECall _ecall = (lang.Absyn.ECall) foo;
       if (_i_ > 16) render(_L_PAREN);
       pp(_ecall.ident_, 0);
       render("(");
       pp(_ecall.listexp_, 0);
       render(")");
       if (_i_ > 16) render(_R_PAREN);
    }
    else     if (foo instanceof lang.Absyn.EObjCall)
    {
       lang.Absyn.EObjCall _eobjcall = (lang.Absyn.EObjCall) foo;
       if (_i_ > 16) render(_L_PAREN);
       pp(_eobjcall.ident_1, 0);
       render(".");
       pp(_eobjcall.ident_2, 0);
       render("(");
       pp(_eobjcall.listexp_, 0);
       render(")");
       if (_i_ > 16) render(_R_PAREN);
    }
    else     if (foo instanceof lang.Absyn.EPow)
    {
       lang.Absyn.EPow _epow = (lang.Absyn.EPow) foo;
       if (_i_ > 13) render(_L_PAREN);
       pp(_epow.exp_1, 13);
       render("**");
       pp(_epow.exp_2, 14);
       if (_i_ > 13) render(_R_PAREN);
    }
    else     if (foo instanceof lang.Absyn.EMul)
    {
       lang.Absyn.EMul _emul = (lang.Absyn.EMul) foo;
       if (_i_ > 12) render(_L_PAREN);
       pp(_emul.exp_1, 12);
       render("*");
       pp(_emul.exp_2, 13);
       if (_i_ > 12) render(_R_PAREN);
    }
    else     if (foo instanceof lang.Absyn.EDiv)
    {
       lang.Absyn.EDiv _ediv = (lang.Absyn.EDiv) foo;
       if (_i_ > 12) render(_L_PAREN);
       pp(_ediv.exp_1, 12);
       render("/");
       pp(_ediv.exp_2, 13);
       if (_i_ > 12) render(_R_PAREN);
    }
    else     if (foo instanceof lang.Absyn.EMod)
    {
       lang.Absyn.EMod _emod = (lang.Absyn.EMod) foo;
       if (_i_ > 12) render(_L_PAREN);
       pp(_emod.exp_1, 12);
       render("%");
       pp(_emod.exp_2, 13);
       if (_i_ > 12) render(_R_PAREN);
    }
    else     if (foo instanceof lang.Absyn.EAdd)
    {
       lang.Absyn.EAdd _eadd = (lang.Absyn.EAdd) foo;
       if (_i_ > 11) render(_L_PAREN);
       pp(_eadd.exp_1, 11);
       render("+");
       pp(_eadd.exp_2, 12);
       if (_i_ > 11) render(_R_PAREN);
    }
    else     if (foo instanceof lang.Absyn.ESub)
    {
       lang.Absyn.ESub _esub = (lang.Absyn.ESub) foo;
       if (_i_ > 11) render(_L_PAREN);
       pp(_esub.exp_1, 11);
       render("-");
       pp(_esub.exp_2, 12);
       if (_i_ > 11) render(_R_PAREN);
    }
    else     if (foo instanceof lang.Absyn.ELt)
    {
       lang.Absyn.ELt _elt = (lang.Absyn.ELt) foo;
       if (_i_ > 9) render(_L_PAREN);
       pp(_elt.exp_1, 9);
       render("<");
       pp(_elt.exp_2, 10);
       if (_i_ > 9) render(_R_PAREN);
    }
    else     if (foo instanceof lang.Absyn.EGt)
    {
       lang.Absyn.EGt _egt = (lang.Absyn.EGt) foo;
       if (_i_ > 9) render(_L_PAREN);
       pp(_egt.exp_1, 9);
       render(">");
       pp(_egt.exp_2, 10);
       if (_i_ > 9) render(_R_PAREN);
    }
    else     if (foo instanceof lang.Absyn.ELEq)
    {
       lang.Absyn.ELEq _eleq = (lang.Absyn.ELEq) foo;
       if (_i_ > 9) render(_L_PAREN);
       pp(_eleq.exp_1, 9);
       render("<=");
       pp(_eleq.exp_2, 10);
       if (_i_ > 9) render(_R_PAREN);
    }
    else     if (foo instanceof lang.Absyn.EGEq)
    {
       lang.Absyn.EGEq _egeq = (lang.Absyn.EGEq) foo;
       if (_i_ > 9) render(_L_PAREN);
       pp(_egeq.exp_1, 9);
       render(">=");
       pp(_egeq.exp_2, 10);
       if (_i_ > 9) render(_R_PAREN);
    }
    else     if (foo instanceof lang.Absyn.EEq)
    {
       lang.Absyn.EEq _eeq = (lang.Absyn.EEq) foo;
       if (_i_ > 8) render(_L_PAREN);
       pp(_eeq.exp_1, 8);
       render("==");
       pp(_eeq.exp_2, 9);
       if (_i_ > 8) render(_R_PAREN);
    }
    else     if (foo instanceof lang.Absyn.ENEq)
    {
       lang.Absyn.ENEq _eneq = (lang.Absyn.ENEq) foo;
       if (_i_ > 8) render(_L_PAREN);
       pp(_eneq.exp_1, 8);
       render("!=");
       pp(_eneq.exp_2, 9);
       if (_i_ > 8) render(_R_PAREN);
    }
    else     if (foo instanceof lang.Absyn.EAnd)
    {
       lang.Absyn.EAnd _eand = (lang.Absyn.EAnd) foo;
       if (_i_ > 4) render(_L_PAREN);
       pp(_eand.exp_1, 4);
       render("AND");
       pp(_eand.exp_2, 5);
       if (_i_ > 4) render(_R_PAREN);
    }
    else     if (foo instanceof lang.Absyn.EOr)
    {
       lang.Absyn.EOr _eor = (lang.Absyn.EOr) foo;
       if (_i_ > 3) render(_L_PAREN);
       pp(_eor.exp_1, 3);
       render("OR");
       pp(_eor.exp_2, 4);
       if (_i_ > 3) render(_R_PAREN);
    }

  }

  private static void pp(lang.Absyn.ListIdent foo, int _i_)
  {
    ppListIdent(foo.iterator(), _i_);
  }

  private static void ppListIdent(java.util.Iterator<String> it, int _i_)
  {
    if (it.hasNext())
    {
      String el = it.next();
      if (!it.hasNext())
      { /* last */
        pp(el, _i_);
      }
      else
      { /* cons */
        pp(el, _i_); render(","); ppListIdent(it, _i_);
      }
    }
  }


  private static void pp(lang.Absyn.Assign_Op foo, int _i_)
  {
    if (foo instanceof lang.Absyn.Assign)
    {
       lang.Absyn.Assign _assign = (lang.Absyn.Assign) foo;
       if (_i_ > 0) render(_L_PAREN);
       render("=");
       if (_i_ > 0) render(_R_PAREN);
    }
    else     if (foo instanceof lang.Absyn.AssignMul)
    {
       lang.Absyn.AssignMul _assignmul = (lang.Absyn.AssignMul) foo;
       if (_i_ > 0) render(_L_PAREN);
       render("*=");
       if (_i_ > 0) render(_R_PAREN);
    }
    else     if (foo instanceof lang.Absyn.AssignDiv)
    {
       lang.Absyn.AssignDiv _assigndiv = (lang.Absyn.AssignDiv) foo;
       if (_i_ > 0) render(_L_PAREN);
       render("/=");
       if (_i_ > 0) render(_R_PAREN);
    }
    else     if (foo instanceof lang.Absyn.AssignMod)
    {
       lang.Absyn.AssignMod _assignmod = (lang.Absyn.AssignMod) foo;
       if (_i_ > 0) render(_L_PAREN);
       render("%=");
       if (_i_ > 0) render(_R_PAREN);
    }
    else     if (foo instanceof lang.Absyn.AssignAdd)
    {
       lang.Absyn.AssignAdd _assignadd = (lang.Absyn.AssignAdd) foo;
       if (_i_ > 0) render(_L_PAREN);
       render("+=");
       if (_i_ > 0) render(_R_PAREN);
    }
    else     if (foo instanceof lang.Absyn.AssignSub)
    {
       lang.Absyn.AssignSub _assignsub = (lang.Absyn.AssignSub) foo;
       if (_i_ > 0) render(_L_PAREN);
       render("-=");
       if (_i_ > 0) render(_R_PAREN);
    }

  }

  private static void pp(lang.Absyn.IncrmDecrm_Op foo, int _i_)
  {
    if (foo instanceof lang.Absyn.Increment)
    {
       lang.Absyn.Increment _increment = (lang.Absyn.Increment) foo;
       if (_i_ > 0) render(_L_PAREN);
       render("++");
       if (_i_ > 0) render(_R_PAREN);
    }
    else     if (foo instanceof lang.Absyn.Decrement)
    {
       lang.Absyn.Decrement _decrement = (lang.Absyn.Decrement) foo;
       if (_i_ > 0) render(_L_PAREN);
       render("--");
       if (_i_ > 0) render(_R_PAREN);
    }

  }

  private static void pp(lang.Absyn.ListExp foo, int _i_)
  {
    ppListExp(foo.iterator(), _i_);
  }

  private static void ppListExp(java.util.Iterator<lang.Absyn.Exp> it, int _i_)
  {
    if (it.hasNext())
    {
      lang.Absyn.Exp el = it.next();
      if (!it.hasNext())
      { /* last */
        pp(el, _i_);
      }
      else
      { /* cons */
        pp(el, _i_); render(","); ppListExp(it, _i_);
      }
    }
  }


  private static void pp(lang.Absyn.FuncType foo, int _i_)
  {
    if (foo instanceof lang.Absyn.FuncType_void)
    {
       lang.Absyn.FuncType_void _functype_void = (lang.Absyn.FuncType_void) foo;
       if (_i_ > 0) render(_L_PAREN);
       render("void");
       if (_i_ > 0) render(_R_PAREN);
    }
    else     if (foo instanceof lang.Absyn.FuncTypeVarType)
    {
       lang.Absyn.FuncTypeVarType _functypevartype = (lang.Absyn.FuncTypeVarType) foo;
       if (_i_ > 0) render(_L_PAREN);
       pp(_functypevartype.vartype_, 0);
       if (_i_ > 0) render(_R_PAREN);
    }

  }

  private static void pp(lang.Absyn.VarType foo, int _i_)
  {
    if (foo instanceof lang.Absyn.VarType_int)
    {
       lang.Absyn.VarType_int _vartype_int = (lang.Absyn.VarType_int) foo;
       if (_i_ > 0) render(_L_PAREN);
       render("int");
       if (_i_ > 0) render(_R_PAREN);
    }
    else     if (foo instanceof lang.Absyn.VarType_double)
    {
       lang.Absyn.VarType_double _vartype_double = (lang.Absyn.VarType_double) foo;
       if (_i_ > 0) render(_L_PAREN);
       render("double");
       if (_i_ > 0) render(_R_PAREN);
    }
    else     if (foo instanceof lang.Absyn.VarType_bool)
    {
       lang.Absyn.VarType_bool _vartype_bool = (lang.Absyn.VarType_bool) foo;
       if (_i_ > 0) render(_L_PAREN);
       render("bool");
       if (_i_ > 0) render(_R_PAREN);
    }
    else     if (foo instanceof lang.Absyn.VarType_char)
    {
       lang.Absyn.VarType_char _vartype_char = (lang.Absyn.VarType_char) foo;
       if (_i_ > 0) render(_L_PAREN);
       render("char");
       if (_i_ > 0) render(_R_PAREN);
    }
    else     if (foo instanceof lang.Absyn.VarType_string)
    {
       lang.Absyn.VarType_string _vartype_string = (lang.Absyn.VarType_string) foo;
       if (_i_ > 0) render(_L_PAREN);
       render("string");
       if (_i_ > 0) render(_R_PAREN);
    }
    else     if (foo instanceof lang.Absyn.VarType_auto)
    {
       lang.Absyn.VarType_auto _vartype_auto = (lang.Absyn.VarType_auto) foo;
       if (_i_ > 0) render(_L_PAREN);
       render("auto");
       if (_i_ > 0) render(_R_PAREN);
    }
    else     if (foo instanceof lang.Absyn.VarType_func)
    {
       lang.Absyn.VarType_func _vartype_func = (lang.Absyn.VarType_func) foo;
       if (_i_ > 0) render(_L_PAREN);
       render("func");
       if (_i_ > 0) render(_R_PAREN);
    }
    else     if (foo instanceof lang.Absyn.VarType_object)
    {
       lang.Absyn.VarType_object _vartype_object = (lang.Absyn.VarType_object) foo;
       if (_i_ > 0) render(_L_PAREN);
       render("object");
       if (_i_ > 0) render(_R_PAREN);
    }

  }

  private static void pp(lang.Absyn.TypeCast foo, int _i_)
  {
    if (foo instanceof lang.Absyn.TypeCast_toInt)
    {
       lang.Absyn.TypeCast_toInt _typecast_toint = (lang.Absyn.TypeCast_toInt) foo;
       if (_i_ > 0) render(_L_PAREN);
       render("toInt");
       if (_i_ > 0) render(_R_PAREN);
    }
    else     if (foo instanceof lang.Absyn.TypeCast_toDouble)
    {
       lang.Absyn.TypeCast_toDouble _typecast_todouble = (lang.Absyn.TypeCast_toDouble) foo;
       if (_i_ > 0) render(_L_PAREN);
       render("toDouble");
       if (_i_ > 0) render(_R_PAREN);
    }
    else     if (foo instanceof lang.Absyn.TypeCast_toBool)
    {
       lang.Absyn.TypeCast_toBool _typecast_tobool = (lang.Absyn.TypeCast_toBool) foo;
       if (_i_ > 0) render(_L_PAREN);
       render("toBool");
       if (_i_ > 0) render(_R_PAREN);
    }
    else     if (foo instanceof lang.Absyn.TypeCast_toChar)
    {
       lang.Absyn.TypeCast_toChar _typecast_tochar = (lang.Absyn.TypeCast_toChar) foo;
       if (_i_ > 0) render(_L_PAREN);
       render("toChar");
       if (_i_ > 0) render(_R_PAREN);
    }
    else     if (foo instanceof lang.Absyn.TypeCast_toString)
    {
       lang.Absyn.TypeCast_toString _typecast_tostring = (lang.Absyn.TypeCast_toString) foo;
       if (_i_ > 0) render(_L_PAREN);
       render("toString");
       if (_i_ > 0) render(_R_PAREN);
    }

  }


  private static void sh(lang.Absyn.Program foo)
  {
    if (foo instanceof lang.Absyn.PStms)
    {
       lang.Absyn.PStms _pstms = (lang.Absyn.PStms) foo;
       render("(");
       render("PStms");
       render("[");
       sh(_pstms.liststm_);
       render("]");
       render(")");
    }
    if (foo instanceof lang.Absyn.PFunctionalModeStms)
    {
       lang.Absyn.PFunctionalModeStms _pfunctionalmodestms = (lang.Absyn.PFunctionalModeStms) foo;
       render("(");
       render("PFunctionalModeStms");
       render("[");
       sh(_pfunctionalmodestms.liststm_);
       render("]");
       render(")");
    }
  }

  private static void sh(lang.Absyn.Stm foo)
  {
    if (foo instanceof lang.Absyn.DefFun)
    {
       lang.Absyn.DefFun _deffun = (lang.Absyn.DefFun) foo;
       render("(");
       render("DefFun");
       sh(_deffun.functype_);
       sh(_deffun.ident_);
       render("[");
       sh(_deffun.listarg_);
       render("]");
       render("[");
       sh(_deffun.liststm_);
       render("]");
       render(")");
    }
    if (foo instanceof lang.Absyn.DefConstructor)
    {
       lang.Absyn.DefConstructor _defconstructor = (lang.Absyn.DefConstructor) foo;
       render("(");
       render("DefConstructor");
       sh(_defconstructor.ident_);
       render("[");
       sh(_defconstructor.listarg_);
       render("]");
       render("[");
       sh(_defconstructor.liststm_);
       render("]");
       render(")");
    }
    if (foo instanceof lang.Absyn.DefClass)
    {
       lang.Absyn.DefClass _defclass = (lang.Absyn.DefClass) foo;
       render("(");
       render("DefClass");
       sh(_defclass.ident_);
       render("[");
       sh(_defclass.liststm_);
       render("]");
       render(")");
    }
    if (foo instanceof lang.Absyn.DefClassInherits)
    {
       lang.Absyn.DefClassInherits _defclassinherits = (lang.Absyn.DefClassInherits) foo;
       render("(");
       render("DefClassInherits");
       sh(_defclassinherits.ident_1);
       sh(_defclassinherits.ident_2);
       render("[");
       sh(_defclassinherits.liststm_);
       render("]");
       render(")");
    }
    if (foo instanceof lang.Absyn.SPrint)
    {
       lang.Absyn.SPrint _sprint = (lang.Absyn.SPrint) foo;
       render("(");
       render("SPrint");
       sh(_sprint.exp_);
       render(")");
    }
    if (foo instanceof lang.Absyn.SBreak)
    {
       lang.Absyn.SBreak _sbreak = (lang.Absyn.SBreak) foo;
       render("SBreak");
    }
    if (foo instanceof lang.Absyn.SContinue)
    {
       lang.Absyn.SContinue _scontinue = (lang.Absyn.SContinue) foo;
       render("SContinue");
    }
    if (foo instanceof lang.Absyn.InitialiseStm)
    {
       lang.Absyn.InitialiseStm _initialisestm = (lang.Absyn.InitialiseStm) foo;
       render("(");
       render("InitialiseStm");
       sh(_initialisestm.stm_initialise_);
       render(")");
    }
    if (foo instanceof lang.Absyn.DeclareStm)
    {
       lang.Absyn.DeclareStm _declarestm = (lang.Absyn.DeclareStm) foo;
       render("(");
       render("DeclareStm");
       sh(_declarestm.stm_declare_);
       render(")");
    }
    if (foo instanceof lang.Absyn.AssignStm)
    {
       lang.Absyn.AssignStm _assignstm = (lang.Absyn.AssignStm) foo;
       render("(");
       render("AssignStm");
       sh(_assignstm.stm_assign_);
       render(")");
    }
    if (foo instanceof lang.Absyn.LoopStm)
    {
       lang.Absyn.LoopStm _loopstm = (lang.Absyn.LoopStm) foo;
       render("(");
       render("LoopStm");
       sh(_loopstm.stm_loop_);
       render(")");
    }
    if (foo instanceof lang.Absyn.IncrnDecrmStm)
    {
       lang.Absyn.IncrnDecrmStm _incrndecrmstm = (lang.Absyn.IncrnDecrmStm) foo;
       render("(");
       render("IncrnDecrmStm");
       sh(_incrndecrmstm.stm_incrmdecrm_);
       render(")");
    }
    if (foo instanceof lang.Absyn.SCall)
    {
       lang.Absyn.SCall _scall = (lang.Absyn.SCall) foo;
       render("(");
       render("SCall");
       sh(_scall.exp_);
       render(")");
    }
    if (foo instanceof lang.Absyn.SAppend)
    {
       lang.Absyn.SAppend _sappend = (lang.Absyn.SAppend) foo;
       render("(");
       render("SAppend");
       sh(_sappend.ident_);
       sh(_sappend.exp_);
       render(")");
    }
    if (foo instanceof lang.Absyn.SRemove)
    {
       lang.Absyn.SRemove _sremove = (lang.Absyn.SRemove) foo;
       render("(");
       render("SRemove");
       sh(_sremove.ident_);
       sh(_sremove.exp_);
       render(")");
    }
    if (foo instanceof lang.Absyn.SReturn)
    {
       lang.Absyn.SReturn _sreturn = (lang.Absyn.SReturn) foo;
       render("(");
       render("SReturn");
       sh(_sreturn.exp_);
       render(")");
    }
    if (foo instanceof lang.Absyn.SObjInit)
    {
       lang.Absyn.SObjInit _sobjinit = (lang.Absyn.SObjInit) foo;
       render("(");
       render("SObjInit");
       sh(_sobjinit.ident_1);
       sh(_sobjinit.ident_2);
       render("[");
       sh(_sobjinit.listexp_);
       render("]");
       render(")");
    }
    if (foo instanceof lang.Absyn.SConstInit)
    {
       lang.Absyn.SConstInit _sconstinit = (lang.Absyn.SConstInit) foo;
       render("(");
       render("SConstInit");
       sh(_sconstinit.vartype_);
       sh(_sconstinit.ident_);
       sh(_sconstinit.exp_);
       render(")");
    }
    if (foo instanceof lang.Absyn.IfS)
    {
       lang.Absyn.IfS _ifs = (lang.Absyn.IfS) foo;
       render("(");
       render("IfS");
       sh(_ifs.if_stm_);
       render(")");
    }
    if (foo instanceof lang.Absyn.Block)
    {
       lang.Absyn.Block _block = (lang.Absyn.Block) foo;
       render("(");
       render("Block");
       render("[");
       sh(_block.liststm_);
       render("]");
       render(")");
    }
  }

  private static void sh(lang.Absyn.Item foo)
  {
    if (foo instanceof lang.Absyn.LstItem)
    {
       lang.Absyn.LstItem _lstitem = (lang.Absyn.LstItem) foo;
       render("(");
       render("LstItem");
       sh(_lstitem.exp_);
       render(")");
    }
  }

  private static void sh(lang.Absyn.ListItem foo)
  {
     for (java.util.Iterator<lang.Absyn.Item> it = foo.iterator(); it.hasNext();)
     {
       sh(it.next());
       if (it.hasNext())
         render(",");
     }
  }

  private static void sh(lang.Absyn.Stm_Initialise foo)
  {
    if (foo instanceof lang.Absyn.SInit)
    {
       lang.Absyn.SInit _sinit = (lang.Absyn.SInit) foo;
       render("(");
       render("SInit");
       sh(_sinit.vartype_);
       sh(_sinit.ident_);
       sh(_sinit.exp_);
       render(")");
    }
  }

  private static void sh(lang.Absyn.Stm_Declare foo)
  {
    if (foo instanceof lang.Absyn.SDecl)
    {
       lang.Absyn.SDecl _sdecl = (lang.Absyn.SDecl) foo;
       render("(");
       render("SDecl");
       sh(_sdecl.vartype_);
       sh(_sdecl.ident_);
       render(")");
    }
  }

  private static void sh(lang.Absyn.Stm_Assign foo)
  {
    if (foo instanceof lang.Absyn.SAssign)
    {
       lang.Absyn.SAssign _sassign = (lang.Absyn.SAssign) foo;
       render("(");
       render("SAssign");
       sh(_sassign.ident_);
       sh(_sassign.assign_op_);
       sh(_sassign.exp_);
       render(")");
    }
  }

  private static void sh(lang.Absyn.Stm_IncrmDecrm foo)
  {
    if (foo instanceof lang.Absyn.SIncrmDecrm)
    {
       lang.Absyn.SIncrmDecrm _sincrmdecrm = (lang.Absyn.SIncrmDecrm) foo;
       render("(");
       render("SIncrmDecrm");
       sh(_sincrmdecrm.ident_);
       sh(_sincrmdecrm.incrmdecrm_op_);
       render(")");
    }
  }

  private static void sh(lang.Absyn.Stm_Loop foo)
  {
    if (foo instanceof lang.Absyn.SWhile)
    {
       lang.Absyn.SWhile _swhile = (lang.Absyn.SWhile) foo;
       render("(");
       render("SWhile");
       sh(_swhile.exp_);
       render("[");
       sh(_swhile.liststm_);
       render("]");
       render(")");
    }
    if (foo instanceof lang.Absyn.SPLoopIdent)
    {
       lang.Absyn.SPLoopIdent _sploopident = (lang.Absyn.SPLoopIdent) foo;
       render("(");
       render("SPLoopIdent");
       sh(_sploopident.ident_1);
       sh(_sploopident.ident_2);
       render("[");
       sh(_sploopident.liststm_);
       render("]");
       render(")");
    }
    if (foo instanceof lang.Absyn.SPLoopList)
    {
       lang.Absyn.SPLoopList _splooplist = (lang.Absyn.SPLoopList) foo;
       render("(");
       render("SPLoopList");
       sh(_splooplist.ident_);
       render("[");
       sh(_splooplist.listitem_);
       render("]");
       render("[");
       sh(_splooplist.liststm_);
       render("]");
       render(")");
    }
    if (foo instanceof lang.Absyn.SPLoopRangeStart)
    {
       lang.Absyn.SPLoopRangeStart _splooprangestart = (lang.Absyn.SPLoopRangeStart) foo;
       render("(");
       render("SPLoopRangeStart");
       sh(_splooprangestart.ident_);
       sh(_splooprangestart.exp_);
       render("[");
       sh(_splooprangestart.liststm_);
       render("]");
       render(")");
    }
    if (foo instanceof lang.Absyn.SPLoopRangeStartStop)
    {
       lang.Absyn.SPLoopRangeStartStop _splooprangestartstop = (lang.Absyn.SPLoopRangeStartStop) foo;
       render("(");
       render("SPLoopRangeStartStop");
       sh(_splooprangestartstop.ident_);
       sh(_splooprangestartstop.exp_1);
       sh(_splooprangestartstop.exp_2);
       render("[");
       sh(_splooprangestartstop.liststm_);
       render("]");
       render(")");
    }
    if (foo instanceof lang.Absyn.SPLoopRangeStartStopEnd)
    {
       lang.Absyn.SPLoopRangeStartStopEnd _splooprangestartstopend = (lang.Absyn.SPLoopRangeStartStopEnd) foo;
       render("(");
       render("SPLoopRangeStartStopEnd");
       sh(_splooprangestartstopend.ident_);
       sh(_splooprangestartstopend.exp_1);
       sh(_splooprangestartstopend.exp_2);
       sh(_splooprangestartstopend.exp_3);
       render("[");
       sh(_splooprangestartstopend.liststm_);
       render("]");
       render(")");
    }
    if (foo instanceof lang.Absyn.SCLoop)
    {
       lang.Absyn.SCLoop _scloop = (lang.Absyn.SCLoop) foo;
       render("(");
       render("SCLoop");
       sh(_scloop.stm_initialise_);
       sh(_scloop.exp_);
       sh(_scloop.stm_incrmdecrm_);
       render("[");
       sh(_scloop.liststm_);
       render("]");
       render(")");
    }
    if (foo instanceof lang.Absyn.SCLoopAssign)
    {
       lang.Absyn.SCLoopAssign _scloopassign = (lang.Absyn.SCLoopAssign) foo;
       render("(");
       render("SCLoopAssign");
       sh(_scloopassign.stm_initialise_);
       sh(_scloopassign.exp_);
       sh(_scloopassign.stm_assign_);
       render("[");
       sh(_scloopassign.liststm_);
       render("]");
       render(")");
    }
  }

  private static void sh(lang.Absyn.If_Stm foo)
  {
    if (foo instanceof lang.Absyn.SIf)
    {
       lang.Absyn.SIf _sif = (lang.Absyn.SIf) foo;
       render("(");
       render("SIf");
       sh(_sif.exp_);
       render("[");
       sh(_sif.liststm_);
       render("]");
       render(")");
    }
    if (foo instanceof lang.Absyn.SIfElse)
    {
       lang.Absyn.SIfElse _sifelse = (lang.Absyn.SIfElse) foo;
       render("(");
       render("SIfElse");
       sh(_sifelse.exp_);
       render("[");
       sh(_sifelse.liststm_1);
       render("]");
       render("[");
       sh(_sifelse.liststm_2);
       render("]");
       render(")");
    }
    if (foo instanceof lang.Absyn.SIfElseIf)
    {
       lang.Absyn.SIfElseIf _sifelseif = (lang.Absyn.SIfElseIf) foo;
       render("(");
       render("SIfElseIf");
       sh(_sifelseif.exp_);
       render("[");
       sh(_sifelseif.liststm_);
       render("]");
       sh(_sifelseif.if_stm_);
       render(")");
    }
  }

  private static void sh(lang.Absyn.Arg foo)
  {
    if (foo instanceof lang.Absyn.ArgDecl)
    {
       lang.Absyn.ArgDecl _argdecl = (lang.Absyn.ArgDecl) foo;
       render("(");
       render("ArgDecl");
       sh(_argdecl.vartype_);
       sh(_argdecl.ident_);
       render(")");
    }
  }

  private static void sh(lang.Absyn.ListArg foo)
  {
     for (java.util.Iterator<lang.Absyn.Arg> it = foo.iterator(); it.hasNext();)
     {
       sh(it.next());
       if (it.hasNext())
         render(",");
     }
  }

  private static void sh(lang.Absyn.ListStm foo)
  {
     for (java.util.Iterator<lang.Absyn.Stm> it = foo.iterator(); it.hasNext();)
     {
       sh(it.next());
       if (it.hasNext())
         render(",");
     }
  }

  private static void sh(lang.Absyn.Exp foo)
  {
    if (foo instanceof lang.Absyn.EInt)
    {
       lang.Absyn.EInt _eint = (lang.Absyn.EInt) foo;
       render("(");
       render("EInt");
       sh(_eint.integer_);
       render(")");
    }
    if (foo instanceof lang.Absyn.ENegInt)
    {
       lang.Absyn.ENegInt _enegint = (lang.Absyn.ENegInt) foo;
       render("(");
       render("ENegInt");
       sh(_enegint.integer_);
       render(")");
    }
    if (foo instanceof lang.Absyn.EChar)
    {
       lang.Absyn.EChar _echar = (lang.Absyn.EChar) foo;
       render("(");
       render("EChar");
       sh(_echar.char_);
       render(")");
    }
    if (foo instanceof lang.Absyn.EDouble)
    {
       lang.Absyn.EDouble _edouble = (lang.Absyn.EDouble) foo;
       render("(");
       render("EDouble");
       sh(_edouble.double_);
       render(")");
    }
    if (foo instanceof lang.Absyn.ENegDouble)
    {
       lang.Absyn.ENegDouble _enegdouble = (lang.Absyn.ENegDouble) foo;
       render("(");
       render("ENegDouble");
       sh(_enegdouble.double_);
       render(")");
    }
    if (foo instanceof lang.Absyn.EString)
    {
       lang.Absyn.EString _estring = (lang.Absyn.EString) foo;
       render("(");
       render("EString");
       sh(_estring.string_);
       render(")");
    }
    if (foo instanceof lang.Absyn.ETrue)
    {
       lang.Absyn.ETrue _etrue = (lang.Absyn.ETrue) foo;
       render("ETrue");
    }
    if (foo instanceof lang.Absyn.EFalse)
    {
       lang.Absyn.EFalse _efalse = (lang.Absyn.EFalse) foo;
       render("EFalse");
    }
    if (foo instanceof lang.Absyn.EId)
    {
       lang.Absyn.EId _eid = (lang.Absyn.EId) foo;
       render("(");
       render("EId");
       sh(_eid.ident_);
       render(")");
    }
    if (foo instanceof lang.Absyn.EListItem)
    {
       lang.Absyn.EListItem _elistitem = (lang.Absyn.EListItem) foo;
       render("(");
       render("EListItem");
       sh(_elistitem.ident_);
       sh(_elistitem.exp_);
       render(")");
    }
    if (foo instanceof lang.Absyn.EListWith)
    {
       lang.Absyn.EListWith _elistwith = (lang.Absyn.EListWith) foo;
       render("(");
       render("EListWith");
       sh(_elistwith.ident_);
       sh(_elistwith.exp_);
       render(")");
    }
    if (foo instanceof lang.Absyn.EListWithout)
    {
       lang.Absyn.EListWithout _elistwithout = (lang.Absyn.EListWithout) foo;
       render("(");
       render("EListWithout");
       sh(_elistwithout.ident_);
       sh(_elistwithout.exp_);
       render(")");
    }
    if (foo instanceof lang.Absyn.EList)
    {
       lang.Absyn.EList _elist = (lang.Absyn.EList) foo;
       render("(");
       render("EList");
       render("[");
       sh(_elist.listitem_);
       render("]");
       render(")");
    }
    if (foo instanceof lang.Absyn.EListSize)
    {
       lang.Absyn.EListSize _elistsize = (lang.Absyn.EListSize) foo;
       render("(");
       render("EListSize");
       sh(_elistsize.ident_);
       render(")");
    }
    if (foo instanceof lang.Absyn.EInput)
    {
       lang.Absyn.EInput _einput = (lang.Absyn.EInput) foo;
       render("EInput");
    }
    if (foo instanceof lang.Absyn.EStrLength)
    {
       lang.Absyn.EStrLength _estrlength = (lang.Absyn.EStrLength) foo;
       render("(");
       render("EStrLength");
       sh(_estrlength.ident_);
       render(")");
    }
    if (foo instanceof lang.Absyn.ERand)
    {
       lang.Absyn.ERand _erand = (lang.Absyn.ERand) foo;
       render("(");
       render("ERand");
       sh(_erand.integer_);
       render(")");
    }
    if (foo instanceof lang.Absyn.ETypeCast)
    {
       lang.Absyn.ETypeCast _etypecast = (lang.Absyn.ETypeCast) foo;
       render("(");
       render("ETypeCast");
       sh(_etypecast.ident_);
       sh(_etypecast.typecast_);
       render(")");
    }
    if (foo instanceof lang.Absyn.ELambda)
    {
       lang.Absyn.ELambda _elambda = (lang.Absyn.ELambda) foo;
       render("(");
       render("ELambda");
       render("[");
       sh(_elambda.listarg_);
       render("]");
       render("[");
       sh(_elambda.liststm_);
       render("]");
       render(")");
    }
    if (foo instanceof lang.Absyn.EMapIdent)
    {
       lang.Absyn.EMapIdent _emapident = (lang.Absyn.EMapIdent) foo;
       render("(");
       render("EMapIdent");
       sh(_emapident.exp_);
       sh(_emapident.ident_);
       render(")");
    }
    if (foo instanceof lang.Absyn.EMapList)
    {
       lang.Absyn.EMapList _emaplist = (lang.Absyn.EMapList) foo;
       render("(");
       render("EMapList");
       sh(_emaplist.exp_);
       render("[");
       sh(_emaplist.listitem_);
       render("]");
       render(")");
    }
    if (foo instanceof lang.Absyn.EFilterIdent)
    {
       lang.Absyn.EFilterIdent _efilterident = (lang.Absyn.EFilterIdent) foo;
       render("(");
       render("EFilterIdent");
       sh(_efilterident.exp_);
       sh(_efilterident.ident_);
       render(")");
    }
    if (foo instanceof lang.Absyn.EFilterList)
    {
       lang.Absyn.EFilterList _efilterlist = (lang.Absyn.EFilterList) foo;
       render("(");
       render("EFilterList");
       sh(_efilterlist.exp_);
       render("[");
       sh(_efilterlist.listitem_);
       render("]");
       render(")");
    }
    if (foo instanceof lang.Absyn.EReduceIdent)
    {
       lang.Absyn.EReduceIdent _ereduceident = (lang.Absyn.EReduceIdent) foo;
       render("(");
       render("EReduceIdent");
       sh(_ereduceident.exp_);
       sh(_ereduceident.ident_);
       render(")");
    }
    if (foo instanceof lang.Absyn.EReduceList)
    {
       lang.Absyn.EReduceList _ereducelist = (lang.Absyn.EReduceList) foo;
       render("(");
       render("EReduceList");
       sh(_ereducelist.exp_);
       render("[");
       sh(_ereducelist.listitem_);
       render("]");
       render(")");
    }
    if (foo instanceof lang.Absyn.ESelect)
    {
       lang.Absyn.ESelect _eselect = (lang.Absyn.ESelect) foo;
       render("(");
       render("ESelect");
       sh(_eselect.ident_1);
       sh(_eselect.ident_2);
       render(")");
    }
    if (foo instanceof lang.Absyn.ESelectListItem)
    {
       lang.Absyn.ESelectListItem _eselectlistitem = (lang.Absyn.ESelectListItem) foo;
       render("(");
       render("ESelectListItem");
       sh(_eselectlistitem.ident_1);
       sh(_eselectlistitem.ident_2);
       sh(_eselectlistitem.exp_);
       render(")");
    }
    if (foo instanceof lang.Absyn.ECall)
    {
       lang.Absyn.ECall _ecall = (lang.Absyn.ECall) foo;
       render("(");
       render("ECall");
       sh(_ecall.ident_);
       render("[");
       sh(_ecall.listexp_);
       render("]");
       render(")");
    }
    if (foo instanceof lang.Absyn.EObjCall)
    {
       lang.Absyn.EObjCall _eobjcall = (lang.Absyn.EObjCall) foo;
       render("(");
       render("EObjCall");
       sh(_eobjcall.ident_1);
       sh(_eobjcall.ident_2);
       render("[");
       sh(_eobjcall.listexp_);
       render("]");
       render(")");
    }
    if (foo instanceof lang.Absyn.EPow)
    {
       lang.Absyn.EPow _epow = (lang.Absyn.EPow) foo;
       render("(");
       render("EPow");
       sh(_epow.exp_1);
       sh(_epow.exp_2);
       render(")");
    }
    if (foo instanceof lang.Absyn.EMul)
    {
       lang.Absyn.EMul _emul = (lang.Absyn.EMul) foo;
       render("(");
       render("EMul");
       sh(_emul.exp_1);
       sh(_emul.exp_2);
       render(")");
    }
    if (foo instanceof lang.Absyn.EDiv)
    {
       lang.Absyn.EDiv _ediv = (lang.Absyn.EDiv) foo;
       render("(");
       render("EDiv");
       sh(_ediv.exp_1);
       sh(_ediv.exp_2);
       render(")");
    }
    if (foo instanceof lang.Absyn.EMod)
    {
       lang.Absyn.EMod _emod = (lang.Absyn.EMod) foo;
       render("(");
       render("EMod");
       sh(_emod.exp_1);
       sh(_emod.exp_2);
       render(")");
    }
    if (foo instanceof lang.Absyn.EAdd)
    {
       lang.Absyn.EAdd _eadd = (lang.Absyn.EAdd) foo;
       render("(");
       render("EAdd");
       sh(_eadd.exp_1);
       sh(_eadd.exp_2);
       render(")");
    }
    if (foo instanceof lang.Absyn.ESub)
    {
       lang.Absyn.ESub _esub = (lang.Absyn.ESub) foo;
       render("(");
       render("ESub");
       sh(_esub.exp_1);
       sh(_esub.exp_2);
       render(")");
    }
    if (foo instanceof lang.Absyn.ELt)
    {
       lang.Absyn.ELt _elt = (lang.Absyn.ELt) foo;
       render("(");
       render("ELt");
       sh(_elt.exp_1);
       sh(_elt.exp_2);
       render(")");
    }
    if (foo instanceof lang.Absyn.EGt)
    {
       lang.Absyn.EGt _egt = (lang.Absyn.EGt) foo;
       render("(");
       render("EGt");
       sh(_egt.exp_1);
       sh(_egt.exp_2);
       render(")");
    }
    if (foo instanceof lang.Absyn.ELEq)
    {
       lang.Absyn.ELEq _eleq = (lang.Absyn.ELEq) foo;
       render("(");
       render("ELEq");
       sh(_eleq.exp_1);
       sh(_eleq.exp_2);
       render(")");
    }
    if (foo instanceof lang.Absyn.EGEq)
    {
       lang.Absyn.EGEq _egeq = (lang.Absyn.EGEq) foo;
       render("(");
       render("EGEq");
       sh(_egeq.exp_1);
       sh(_egeq.exp_2);
       render(")");
    }
    if (foo instanceof lang.Absyn.EEq)
    {
       lang.Absyn.EEq _eeq = (lang.Absyn.EEq) foo;
       render("(");
       render("EEq");
       sh(_eeq.exp_1);
       sh(_eeq.exp_2);
       render(")");
    }
    if (foo instanceof lang.Absyn.ENEq)
    {
       lang.Absyn.ENEq _eneq = (lang.Absyn.ENEq) foo;
       render("(");
       render("ENEq");
       sh(_eneq.exp_1);
       sh(_eneq.exp_2);
       render(")");
    }
    if (foo instanceof lang.Absyn.EAnd)
    {
       lang.Absyn.EAnd _eand = (lang.Absyn.EAnd) foo;
       render("(");
       render("EAnd");
       sh(_eand.exp_1);
       sh(_eand.exp_2);
       render(")");
    }
    if (foo instanceof lang.Absyn.EOr)
    {
       lang.Absyn.EOr _eor = (lang.Absyn.EOr) foo;
       render("(");
       render("EOr");
       sh(_eor.exp_1);
       sh(_eor.exp_2);
       render(")");
    }
  }

  private static void sh(lang.Absyn.ListIdent foo)
  {
     for (java.util.Iterator<String> it = foo.iterator(); it.hasNext();)
     {
       sh(it.next());
       if (it.hasNext())
         render(",");
     }
  }

  private static void sh(lang.Absyn.Assign_Op foo)
  {
    if (foo instanceof lang.Absyn.Assign)
    {
       lang.Absyn.Assign _assign = (lang.Absyn.Assign) foo;
       render("Assign");
    }
    if (foo instanceof lang.Absyn.AssignMul)
    {
       lang.Absyn.AssignMul _assignmul = (lang.Absyn.AssignMul) foo;
       render("AssignMul");
    }
    if (foo instanceof lang.Absyn.AssignDiv)
    {
       lang.Absyn.AssignDiv _assigndiv = (lang.Absyn.AssignDiv) foo;
       render("AssignDiv");
    }
    if (foo instanceof lang.Absyn.AssignMod)
    {
       lang.Absyn.AssignMod _assignmod = (lang.Absyn.AssignMod) foo;
       render("AssignMod");
    }
    if (foo instanceof lang.Absyn.AssignAdd)
    {
       lang.Absyn.AssignAdd _assignadd = (lang.Absyn.AssignAdd) foo;
       render("AssignAdd");
    }
    if (foo instanceof lang.Absyn.AssignSub)
    {
       lang.Absyn.AssignSub _assignsub = (lang.Absyn.AssignSub) foo;
       render("AssignSub");
    }
  }

  private static void sh(lang.Absyn.IncrmDecrm_Op foo)
  {
    if (foo instanceof lang.Absyn.Increment)
    {
       lang.Absyn.Increment _increment = (lang.Absyn.Increment) foo;
       render("Increment");
    }
    if (foo instanceof lang.Absyn.Decrement)
    {
       lang.Absyn.Decrement _decrement = (lang.Absyn.Decrement) foo;
       render("Decrement");
    }
  }

  private static void sh(lang.Absyn.ListExp foo)
  {
     for (java.util.Iterator<lang.Absyn.Exp> it = foo.iterator(); it.hasNext();)
     {
       sh(it.next());
       if (it.hasNext())
         render(",");
     }
  }

  private static void sh(lang.Absyn.FuncType foo)
  {
    if (foo instanceof lang.Absyn.FuncType_void)
    {
       lang.Absyn.FuncType_void _functype_void = (lang.Absyn.FuncType_void) foo;
       render("FuncType_void");
    }
    if (foo instanceof lang.Absyn.FuncTypeVarType)
    {
       lang.Absyn.FuncTypeVarType _functypevartype = (lang.Absyn.FuncTypeVarType) foo;
       render("(");
       render("FuncTypeVarType");
       sh(_functypevartype.vartype_);
       render(")");
    }
  }

  private static void sh(lang.Absyn.VarType foo)
  {
    if (foo instanceof lang.Absyn.VarType_int)
    {
       lang.Absyn.VarType_int _vartype_int = (lang.Absyn.VarType_int) foo;
       render("VarType_int");
    }
    if (foo instanceof lang.Absyn.VarType_double)
    {
       lang.Absyn.VarType_double _vartype_double = (lang.Absyn.VarType_double) foo;
       render("VarType_double");
    }
    if (foo instanceof lang.Absyn.VarType_bool)
    {
       lang.Absyn.VarType_bool _vartype_bool = (lang.Absyn.VarType_bool) foo;
       render("VarType_bool");
    }
    if (foo instanceof lang.Absyn.VarType_char)
    {
       lang.Absyn.VarType_char _vartype_char = (lang.Absyn.VarType_char) foo;
       render("VarType_char");
    }
    if (foo instanceof lang.Absyn.VarType_string)
    {
       lang.Absyn.VarType_string _vartype_string = (lang.Absyn.VarType_string) foo;
       render("VarType_string");
    }
    if (foo instanceof lang.Absyn.VarType_auto)
    {
       lang.Absyn.VarType_auto _vartype_auto = (lang.Absyn.VarType_auto) foo;
       render("VarType_auto");
    }
    if (foo instanceof lang.Absyn.VarType_func)
    {
       lang.Absyn.VarType_func _vartype_func = (lang.Absyn.VarType_func) foo;
       render("VarType_func");
    }
    if (foo instanceof lang.Absyn.VarType_object)
    {
       lang.Absyn.VarType_object _vartype_object = (lang.Absyn.VarType_object) foo;
       render("VarType_object");
    }
  }

  private static void sh(lang.Absyn.TypeCast foo)
  {
    if (foo instanceof lang.Absyn.TypeCast_toInt)
    {
       lang.Absyn.TypeCast_toInt _typecast_toint = (lang.Absyn.TypeCast_toInt) foo;
       render("TypeCast_toInt");
    }
    if (foo instanceof lang.Absyn.TypeCast_toDouble)
    {
       lang.Absyn.TypeCast_toDouble _typecast_todouble = (lang.Absyn.TypeCast_toDouble) foo;
       render("TypeCast_toDouble");
    }
    if (foo instanceof lang.Absyn.TypeCast_toBool)
    {
       lang.Absyn.TypeCast_toBool _typecast_tobool = (lang.Absyn.TypeCast_toBool) foo;
       render("TypeCast_toBool");
    }
    if (foo instanceof lang.Absyn.TypeCast_toChar)
    {
       lang.Absyn.TypeCast_toChar _typecast_tochar = (lang.Absyn.TypeCast_toChar) foo;
       render("TypeCast_toChar");
    }
    if (foo instanceof lang.Absyn.TypeCast_toString)
    {
       lang.Absyn.TypeCast_toString _typecast_tostring = (lang.Absyn.TypeCast_toString) foo;
       render("TypeCast_toString");
    }
  }


  private static void pp(Integer n, int _i_) { buf_.append(n); buf_.append(" "); }
  private static void pp(Double d, int _i_) { buf_.append(String.format(java.util.Locale.ROOT, "%.15g ", d)); }
  private static void pp(String s, int _i_) { buf_.append(s); buf_.append(" "); }
  private static void pp(Character c, int _i_) { buf_.append("'" + c.toString() + "'"); buf_.append(" "); }
  private static void sh(Integer n) { render(n.toString()); }
  private static void sh(Double d) { render(String.format(java.util.Locale.ROOT, "%.15g", d)); }
  private static void sh(Character c) { render("'" + c.toString() + "'"); }
  private static void sh(String s) { printQuoted(s); }

  private static void printQuoted(String s) { render("\"" + s + "\""); }

  private static void indent()
  {
    int n = _n_;
    while (n > 0)
    {
      buf_.append(' ');
      n--;
    }
  }

  private static void backup()
  {
    int prev = buf_.length() - 1;
    if (prev >= 0 && buf_.charAt(prev) == ' ')
      buf_.setLength(prev);
  }

  private static void trim()
  {
    // Trim initial spaces
    int end = 0;
    int len = buf_.length();
    while (end < len && buf_.charAt(end) == ' ')
      end++;
    buf_.delete(0, end);
    // Trim trailing spaces
    removeTrailingSpaces();
  }

  private static void removeTrailingSpaces()
  {
    int end = buf_.length();
    while (end > 0 && buf_.charAt(end-1) == ' ')
      end--;
    buf_.setLength(end);
  }

  private static void removeTrailingWhitespace()
  {
    int end = buf_.length();
    while (end > 0 && (buf_.charAt(end-1) == ' ' || buf_.charAt(end-1) == '\n'))
      end--;
    buf_.setLength(end);
  }

  private static void onEmptyLine()
  {
    removeTrailingSpaces();
    int len = buf_.length();
    if (len > 0 && buf_.charAt(len-1) != '\n') buf_.append("\n");
    indent();
  }

  private static int _n_ = 0;
  private static StringBuilder buf_ = new StringBuilder(INITIAL_BUFFER_SIZE);
}

