// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: lang/Yylex

// -*- Java -*- File generated by the BNF Converter (bnfc 2.9.4.1).

// Lexer definition for use with JFlex
package lang;

import java_cup.runtime.*;

// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
public class Yylex implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;
  public static final int COMMENT = 2;
  public static final int CHAR = 4;
  public static final int CHARESC = 6;
  public static final int CHAREND = 8;
  public static final int STRING = 10;
  public static final int ESCAPED = 12;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int[] ZZ_LEXSTATE = {
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6, 6
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\4\1\5\22\0\1\1"+
    "\1\6\1\7\1\10\1\0\1\11\1\0\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\1\22\12\23"+
    "\1\24\1\0\1\25\1\26\1\27\2\0\1\30\1\31"+
    "\1\32\1\33\4\34\1\35\4\34\1\36\1\37\2\34"+
    "\1\40\1\41\7\34\1\42\1\43\1\44\1\0\1\45"+
    "\1\0\1\46\1\47\1\50\1\51\1\52\1\53\1\54"+
    "\1\55\1\56\1\57\1\60\1\61\1\62\1\63\1\64"+
    "\1\65\1\34\1\66\1\67\1\70\1\71\1\72\1\73"+
    "\2\34\1\74\1\75\1\0\1\76\7\0\1\3\72\0"+
    "\27\34\1\0\37\34\1\0\10\34\u0128\0\2\3\326\0"+
    "\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\7\0\1\1\1\2\1\1\1\3\1\1\1\4\1\5"+
    "\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\3\23\1\24\1\25"+
    "\21\23\1\26\1\27\2\30\2\31\1\32\2\33\1\34"+
    "\1\35\1\36\1\37\1\40\1\41\2\42\1\43\1\44"+
    "\1\45\2\46\1\47\1\50\1\51\1\52\1\53\1\54"+
    "\1\55\1\56\1\57\1\60\1\61\1\62\1\63\1\64"+
    "\1\65\1\66\1\0\1\67\1\70\1\71\1\23\1\72"+
    "\14\23\1\73\1\74\20\23\1\75\1\76\16\23\1\77"+
    "\2\23\1\100\1\101\23\23\1\0\1\23\1\102\1\103"+
    "\1\23\1\104\4\23\1\105\2\23\1\106\15\23\1\107"+
    "\6\23\1\110\1\111\1\23\1\112\1\0\1\75\1\23"+
    "\1\113\1\114\1\115\2\23\1\116\3\23\1\117\4\23"+
    "\1\120\1\23\1\121\10\23\1\122\1\23\1\123\1\23"+
    "\1\124\2\23\1\125\1\126\2\23\1\127\1\130\1\131"+
    "\2\23\1\132\1\133\1\134\1\135\1\136\1\137\1\140"+
    "\13\23\1\141\1\23\1\142\1\143\1\144\1\145\1\23"+
    "\1\146\1\147\2\23\1\150\1\23\1\151\1\152";

  private static int [] zzUnpackAction() {
    int [] result = new int[278];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\77\0\176\0\275\0\374\0\u013b\0\u017a\0\u01b9"+
    "\0\u01b9\0\u01f8\0\u01b9\0\u0237\0\u0276\0\u01b9\0\u01b9\0\u01b9"+
    "\0\u02b5\0\u02f4\0\u01b9\0\u0333\0\u01b9\0\u0372\0\u03b1\0\u01b9"+
    "\0\u03f0\0\u042f\0\u046e\0\u04ad\0\u04ec\0\u052b\0\u01b9\0\u01b9"+
    "\0\u056a\0\u05a9\0\u05e8\0\u0627\0\u0666\0\u06a5\0\u06e4\0\u0723"+
    "\0\u0762\0\u07a1\0\u07e0\0\u081f\0\u085e\0\u089d\0\u08dc\0\u091b"+
    "\0\u095a\0\u01b9\0\u01b9\0\u01b9\0\u0999\0\u01b9\0\u09d8\0\u01b9"+
    "\0\u01b9\0\u09d8\0\u01b9\0\u01b9\0\u01b9\0\u01b9\0\u01b9\0\u01b9"+
    "\0\u01b9\0\u0a17\0\u01b9\0\u01b9\0\u01b9\0\u01b9\0\u0a56\0\u01b9"+
    "\0\u01b9\0\u01b9\0\u01b9\0\u01b9\0\u01b9\0\u01b9\0\u01b9\0\u01b9"+
    "\0\u01b9\0\u01b9\0\u01b9\0\u01b9\0\u01b9\0\u01b9\0\u01b9\0\u0a95"+
    "\0\u01b9\0\u01b9\0\u01b9\0\u0ad4\0\u04ec\0\u0b13\0\u0b52\0\u0b91"+
    "\0\u0bd0\0\u0c0f\0\u0c4e\0\u0c8d\0\u0ccc\0\u0d0b\0\u0d4a\0\u0d89"+
    "\0\u0dc8\0\u04ec\0\u0e07\0\u0e46\0\u0e85\0\u0ec4\0\u0f03\0\u0f42"+
    "\0\u0f81\0\u0fc0\0\u0fff\0\u103e\0\u107d\0\u10bc\0\u10fb\0\u113a"+
    "\0\u1179\0\u11b8\0\u11f7\0\u1236\0\u04ec\0\u1275\0\u12b4\0\u12f3"+
    "\0\u1332\0\u1371\0\u13b0\0\u13ef\0\u142e\0\u146d\0\u14ac\0\u14eb"+
    "\0\u152a\0\u1569\0\u15a8\0\u04ec\0\u15e7\0\u1626\0\u04ec\0\u04ec"+
    "\0\u1665\0\u16a4\0\u16e3\0\u1722\0\u1761\0\u17a0\0\u17df\0\u181e"+
    "\0\u185d\0\u189c\0\u18db\0\u191a\0\u1959\0\u1998\0\u19d7\0\u1a16"+
    "\0\u1a55\0\u1a94\0\u1ad3\0\u1b12\0\u1b51\0\u04ec\0\u04ec\0\u1b90"+
    "\0\u04ec\0\u1bcf\0\u1c0e\0\u1c4d\0\u1c8c\0\u04ec\0\u1ccb\0\u1d0a"+
    "\0\u1d49\0\u1d88\0\u1dc7\0\u1e06\0\u1e45\0\u1e84\0\u1ec3\0\u1f02"+
    "\0\u1f41\0\u1f80\0\u1fbf\0\u1ffe\0\u203d\0\u207c\0\u04ec\0\u20bb"+
    "\0\u20fa\0\u2139\0\u2178\0\u21b7\0\u21f6\0\u04ec\0\u04ec\0\u2235"+
    "\0\u2274\0\u22b3\0\u22b3\0\u22f2\0\u04ec\0\u04ec\0\u2331\0\u2370"+
    "\0\u23af\0\u04ec\0\u23ee\0\u242d\0\u246c\0\u04ec\0\u24ab\0\u24ea"+
    "\0\u2529\0\u2568\0\u04ec\0\u25a7\0\u04ec\0\u25e6\0\u2625\0\u2664"+
    "\0\u26a3\0\u26e2\0\u2721\0\u2760\0\u279f\0\u04ec\0\u27de\0\u04ec"+
    "\0\u281d\0\u04ec\0\u285c\0\u289b\0\u04ec\0\u04ec\0\u28da\0\u2919"+
    "\0\u04ec\0\u04ec\0\u04ec\0\u2958\0\u2997\0\u04ec\0\u04ec\0\u04ec"+
    "\0\u04ec\0\u04ec\0\u04ec\0\u04ec\0\u29d6\0\u2a15\0\u2a54\0\u2a93"+
    "\0\u2ad2\0\u2b11\0\u2b50\0\u2b8f\0\u2bce\0\u2c0d\0\u2c4c\0\u04ec"+
    "\0\u2c8b\0\u04ec\0\u2cca\0\u04ec\0\u04ec\0\u2d09\0\u04ec\0\u04ec"+
    "\0\u2d48\0\u2d87\0\u04ec\0\u2dc6\0\u04ec\0\u04ec";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[278];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\10\2\11\1\0\2\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\1\34\6\35"+
    "\1\36\2\35\1\37\1\10\1\40\1\10\1\41\1\42"+
    "\1\43\1\44\1\45\1\46\2\35\1\47\2\35\1\50"+
    "\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\35"+
    "\1\60\1\61\1\35\1\62\1\63\3\64\3\0\2\64"+
    "\1\65\66\64\5\66\1\67\4\66\1\10\30\66\1\70"+
    "\35\66\1\71\2\0\1\72\45\66\1\73\7\66\1\74"+
    "\2\66\1\75\1\66\1\76\6\66\2\10\1\71\2\0"+
    "\1\72\4\10\1\77\64\10\2\100\1\101\2\0\1\102"+
    "\1\100\1\103\33\100\1\104\33\100\2\105\1\106\2\0"+
    "\1\107\1\105\1\110\33\105\1\111\7\105\1\112\7\105"+
    "\1\113\2\105\1\114\1\105\1\115\6\105\125\0\1\116"+
    "\60\0\1\117\114\0\1\120\65\0\1\121\10\0\1\122"+
    "\66\0\1\123\7\0\1\124\70\0\1\125\5\0\1\126"+
    "\76\0\1\127\71\0\1\130\1\0\1\27\101\0\1\131"+
    "\76\0\1\132\76\0\1\133\62\0\1\35\10\0\1\35"+
    "\4\0\6\35\1\134\3\35\3\0\30\35\14\0\1\35"+
    "\10\0\1\35\4\0\12\35\3\0\30\35\14\0\1\35"+
    "\10\0\1\35\4\0\10\35\1\135\1\35\3\0\30\35"+
    "\14\0\1\35\10\0\1\35\4\0\12\35\3\0\20\35"+
    "\1\136\3\35\1\137\3\35\14\0\1\35\10\0\1\35"+
    "\4\0\12\35\3\0\17\35\1\140\1\35\1\141\6\35"+
    "\14\0\1\35\10\0\1\35\4\0\12\35\3\0\10\35"+
    "\1\142\3\35\1\143\2\35\1\144\10\35\14\0\1\35"+
    "\10\0\1\35\4\0\12\35\3\0\17\35\1\145\10\35"+
    "\14\0\1\35\10\0\1\35\4\0\12\35\3\0\14\35"+
    "\1\146\13\35\14\0\1\35\10\0\1\35\4\0\12\35"+
    "\3\0\1\35\1\147\7\35\1\150\12\35\1\151\3\35"+
    "\14\0\1\35\10\0\1\35\4\0\12\35\3\0\6\35"+
    "\1\152\7\35\1\153\11\35\14\0\1\35\10\0\1\35"+
    "\4\0\12\35\3\0\1\35\1\154\3\35\1\155\22\35"+
    "\14\0\1\35\10\0\1\35\4\0\12\35\3\0\1\35"+
    "\1\156\26\35\14\0\1\35\10\0\1\35\4\0\12\35"+
    "\3\0\5\35\1\157\22\35\14\0\1\35\10\0\1\35"+
    "\4\0\12\35\3\0\2\35\1\160\25\35\14\0\1\35"+
    "\10\0\1\35\4\0\12\35\3\0\1\35\1\161\17\35"+
    "\1\162\6\35\14\0\1\35\10\0\1\35\4\0\12\35"+
    "\3\0\1\35\1\163\3\35\1\164\22\35\14\0\1\35"+
    "\10\0\1\35\4\0\12\35\3\0\11\35\1\165\11\35"+
    "\1\166\4\35\14\0\1\35\10\0\1\35\4\0\12\35"+
    "\3\0\17\35\1\167\1\35\1\170\6\35\14\0\1\35"+
    "\10\0\1\35\4\0\12\35\3\0\17\35\1\171\10\35"+
    "\14\0\1\35\10\0\1\35\4\0\12\35\3\0\10\35"+
    "\1\172\1\173\16\35\12\0\1\77\70\0\1\71\76\0"+
    "\1\101\76\0\1\106\117\0\1\174\65\0\1\35\10\0"+
    "\1\35\4\0\3\35\1\175\6\35\3\0\30\35\14\0"+
    "\1\35\10\0\1\35\4\0\12\35\3\0\20\35\1\176"+
    "\7\35\14\0\1\35\10\0\1\35\4\0\12\35\3\0"+
    "\23\35\1\177\4\35\14\0\1\35\10\0\1\35\4\0"+
    "\12\35\3\0\17\35\1\200\10\35\14\0\1\35\10\0"+
    "\1\35\4\0\12\35\3\0\5\35\1\201\22\35\14\0"+
    "\1\35\10\0\1\35\4\0\12\35\3\0\1\35\1\202"+
    "\26\35\14\0\1\35\10\0\1\35\4\0\12\35\3\0"+
    "\1\35\1\203\26\35\14\0\1\35\10\0\1\35\4\0"+
    "\12\35\3\0\16\35\1\204\11\35\14\0\1\35\10\0"+
    "\1\35\4\0\12\35\3\0\24\35\1\205\3\35\14\0"+
    "\1\35\10\0\1\35\4\0\12\35\3\0\22\35\1\206"+
    "\5\35\14\0\1\35\10\0\1\35\4\0\12\35\3\0"+
    "\14\35\1\207\13\35\14\0\1\35\10\0\1\35\4\0"+
    "\12\35\3\0\14\35\1\210\13\35\14\0\1\35\10\0"+
    "\1\35\4\0\12\35\3\0\16\35\1\211\11\35\14\0"+
    "\1\35\10\0\1\35\4\0\12\35\3\0\10\35\1\212"+
    "\7\35\1\213\2\35\1\214\4\35\14\0\1\35\10\0"+
    "\1\35\4\0\12\35\3\0\15\35\1\215\12\35\14\0"+
    "\1\35\10\0\1\35\4\0\12\35\3\0\16\35\1\216"+
    "\11\35\14\0\1\35\10\0\1\35\4\0\12\35\3\0"+
    "\20\35\1\217\7\35\14\0\1\35\10\0\1\35\4\0"+
    "\12\35\3\0\26\35\1\220\1\35\14\0\1\35\10\0"+
    "\1\35\4\0\12\35\3\0\12\35\1\221\15\35\14\0"+
    "\1\35\10\0\1\35\4\0\12\35\3\0\21\35\1\222"+
    "\6\35\14\0\1\35\10\0\1\35\4\0\12\35\3\0"+
    "\11\35\1\223\16\35\14\0\1\35\10\0\1\35\4\0"+
    "\12\35\3\0\16\35\1\224\11\35\14\0\1\35\10\0"+
    "\1\35\4\0\12\35\3\0\4\35\1\225\10\35\1\226"+
    "\2\35\1\227\2\35\1\230\4\35\14\0\1\35\10\0"+
    "\1\35\4\0\12\35\3\0\27\35\1\231\14\0\1\35"+
    "\10\0\1\35\4\0\12\35\3\0\21\35\1\232\6\35"+
    "\14\0\1\35\10\0\1\35\4\0\1\35\1\233\1\234"+
    "\1\235\1\35\1\236\3\35\1\237\3\0\30\35\14\0"+
    "\1\35\10\0\1\35\4\0\12\35\3\0\24\35\1\240"+
    "\3\35\14\0\1\35\10\0\1\35\4\0\12\35\3\0"+
    "\11\35\1\241\16\35\14\0\1\35\10\0\1\35\4\0"+
    "\12\35\3\0\11\35\1\242\16\35\14\0\1\35\10\0"+
    "\1\35\4\0\12\35\3\0\23\35\1\243\4\35\25\0"+
    "\1\174\26\0\1\244\36\0\1\35\10\0\1\35\4\0"+
    "\12\35\3\0\5\35\1\245\22\35\14\0\1\35\10\0"+
    "\1\35\4\0\12\35\3\0\17\35\1\246\10\35\14\0"+
    "\1\35\10\0\1\35\4\0\12\35\3\0\14\35\1\247"+
    "\13\35\14\0\1\35\10\0\1\35\4\0\12\35\3\0"+
    "\1\35\1\250\26\35\14\0\1\35\10\0\1\35\4\0"+
    "\12\35\3\0\21\35\1\251\6\35\14\0\1\35\10\0"+
    "\1\35\4\0\12\35\3\0\22\35\1\252\5\35\14\0"+
    "\1\35\10\0\1\35\4\0\12\35\3\0\22\35\1\253"+
    "\1\254\4\35\14\0\1\35\10\0\1\35\4\0\12\35"+
    "\3\0\2\35\1\255\25\35\14\0\1\35\10\0\1\35"+
    "\4\0\12\35\3\0\5\35\1\256\22\35\14\0\1\35"+
    "\10\0\1\35\4\0\12\35\3\0\22\35\1\257\5\35"+
    "\14\0\1\35\10\0\1\35\4\0\12\35\3\0\23\35"+
    "\1\260\4\35\14\0\1\35\10\0\1\35\4\0\12\35"+
    "\3\0\3\35\1\261\24\35\14\0\1\35\10\0\1\35"+
    "\4\0\12\35\3\0\5\35\1\262\22\35\14\0\1\35"+
    "\10\0\1\35\4\0\12\35\3\0\24\35\1\263\3\35"+
    "\14\0\1\35\10\0\1\35\4\0\12\35\3\0\2\35"+
    "\1\264\25\35\14\0\1\35\10\0\1\35\4\0\12\35"+
    "\3\0\7\35\1\265\20\35\14\0\1\35\10\0\1\35"+
    "\4\0\12\35\3\0\5\35\1\266\22\35\14\0\1\35"+
    "\10\0\1\35\4\0\12\35\3\0\1\35\1\267\26\35"+
    "\14\0\1\35\10\0\1\35\4\0\12\35\3\0\16\35"+
    "\1\270\11\35\14\0\1\35\10\0\1\35\4\0\12\35"+
    "\3\0\4\35\1\271\2\35\1\272\20\35\14\0\1\35"+
    "\10\0\1\35\4\0\12\35\3\0\24\35\1\273\3\35"+
    "\14\0\1\35\10\0\1\35\4\0\12\35\3\0\17\35"+
    "\1\274\10\35\14\0\1\35\10\0\1\35\4\0\12\35"+
    "\3\0\5\35\1\275\22\35\14\0\1\35\10\0\1\35"+
    "\4\0\12\35\3\0\24\35\1\276\3\35\14\0\1\35"+
    "\10\0\1\35\4\0\12\35\3\0\5\35\1\277\22\35"+
    "\14\0\1\35\10\0\1\35\4\0\12\35\3\0\11\35"+
    "\1\300\16\35\14\0\1\35\10\0\1\35\4\0\12\35"+
    "\3\0\17\35\1\301\10\35\14\0\1\35\10\0\1\35"+
    "\4\0\12\35\3\0\10\35\1\302\17\35\14\0\1\35"+
    "\10\0\1\35\4\0\12\35\3\0\17\35\1\303\10\35"+
    "\14\0\1\35\10\0\1\35\4\0\12\35\3\0\16\35"+
    "\1\304\11\35\14\0\1\35\10\0\1\35\4\0\12\35"+
    "\3\0\23\35\1\305\4\35\14\0\1\35\10\0\1\35"+
    "\4\0\12\35\3\0\5\35\1\306\22\35\14\0\1\35"+
    "\10\0\1\35\4\0\12\35\3\0\4\35\1\307\23\35"+
    "\14\0\1\35\10\0\1\35\4\0\12\35\3\0\14\35"+
    "\1\310\13\35\14\0\1\35\10\0\1\35\4\0\12\35"+
    "\3\0\10\35\1\311\17\35\22\0\1\312\2\0\1\313"+
    "\65\0\1\35\10\0\1\35\4\0\12\35\3\0\16\35"+
    "\1\314\11\35\14\0\1\35\10\0\1\35\4\0\12\35"+
    "\3\0\13\35\1\315\14\35\14\0\1\35\10\0\1\35"+
    "\4\0\12\35\3\0\22\35\1\316\5\35\14\0\1\35"+
    "\10\0\1\35\4\0\12\35\3\0\23\35\1\317\4\35"+
    "\14\0\1\35\10\0\1\35\4\0\12\35\3\0\11\35"+
    "\1\320\16\35\14\0\1\35\10\0\1\35\4\0\12\35"+
    "\3\0\14\35\1\321\13\35\14\0\1\35\10\0\1\35"+
    "\4\0\12\35\3\0\5\35\1\322\22\35\14\0\1\35"+
    "\10\0\1\35\4\0\12\35\3\0\5\35\1\323\22\35"+
    "\14\0\1\35\10\0\1\35\4\0\12\35\3\0\23\35"+
    "\1\324\4\35\14\0\1\35\10\0\1\35\4\0\12\35"+
    "\3\0\21\35\1\325\6\35\14\0\1\35\10\0\1\35"+
    "\4\0\12\35\3\0\23\35\1\326\4\35\14\0\1\35"+
    "\10\0\1\35\4\0\12\35\3\0\4\35\1\327\23\35"+
    "\14\0\1\35\10\0\1\35\4\0\12\35\3\0\23\35"+
    "\1\330\4\35\14\0\1\35\10\0\1\35\4\0\12\35"+
    "\3\0\3\35\1\331\24\35\14\0\1\35\10\0\1\35"+
    "\4\0\12\35\3\0\4\35\1\332\23\35\14\0\1\35"+
    "\10\0\1\35\4\0\12\35\3\0\23\35\1\333\4\35"+
    "\14\0\1\35\10\0\1\35\4\0\12\35\3\0\17\35"+
    "\1\334\10\35\14\0\1\35\10\0\1\35\4\0\12\35"+
    "\3\0\5\35\1\335\22\35\14\0\1\35\10\0\1\35"+
    "\4\0\12\35\3\0\3\35\1\336\24\35\14\0\1\35"+
    "\10\0\1\35\4\0\12\35\3\0\25\35\1\337\2\35"+
    "\14\0\1\35\10\0\1\35\4\0\12\35\3\0\1\35"+
    "\1\340\26\35\14\0\1\35\10\0\1\35\4\0\12\35"+
    "\3\0\21\35\1\341\6\35\14\0\1\35\10\0\1\35"+
    "\4\0\12\35\3\0\16\35\1\342\11\35\14\0\1\35"+
    "\10\0\1\35\4\0\12\35\3\0\17\35\1\343\10\35"+
    "\14\0\1\35\10\0\1\35\4\0\12\35\3\0\1\35"+
    "\1\344\26\35\14\0\1\35\10\0\1\35\4\0\12\35"+
    "\3\0\24\35\1\345\3\35\14\0\1\35\10\0\1\35"+
    "\4\0\12\35\3\0\23\35\1\346\4\35\14\0\1\35"+
    "\10\0\1\35\4\0\12\35\3\0\21\35\1\347\6\35"+
    "\14\0\1\35\10\0\1\35\4\0\12\35\3\0\5\35"+
    "\1\350\22\35\14\0\1\35\10\0\1\35\4\0\12\35"+
    "\3\0\17\35\1\351\10\35\25\0\1\313\65\0\1\35"+
    "\10\0\1\35\4\0\12\35\3\0\4\35\1\352\23\35"+
    "\14\0\1\35\10\0\1\35\4\0\12\35\3\0\21\35"+
    "\1\353\6\35\14\0\1\35\10\0\1\35\4\0\12\35"+
    "\3\0\16\35\1\354\11\35\14\0\1\35\10\0\1\35"+
    "\4\0\12\35\3\0\5\35\1\355\22\35\14\0\1\35"+
    "\10\0\1\35\4\0\12\35\3\0\21\35\1\356\6\35"+
    "\14\0\1\35\10\0\1\35\4\0\12\35\3\0\11\35"+
    "\1\357\16\35\14\0\1\35\10\0\1\35\4\0\12\35"+
    "\3\0\11\35\1\360\16\35\14\0\1\35\10\0\1\35"+
    "\4\0\12\35\3\0\1\35\1\361\26\35\14\0\1\35"+
    "\10\0\1\35\4\0\12\35\3\0\10\35\1\362\17\35"+
    "\14\0\1\35\10\0\1\35\4\0\12\35\3\0\23\35"+
    "\1\363\4\35\14\0\1\35\10\0\1\35\4\0\12\35"+
    "\3\0\11\35\1\364\16\35\14\0\1\35\10\0\1\35"+
    "\4\0\12\35\3\0\15\35\1\365\12\35\14\0\1\35"+
    "\10\0\1\35\4\0\12\35\3\0\5\35\1\366\22\35"+
    "\14\0\1\35\10\0\1\35\4\0\12\35\3\0\5\35"+
    "\1\367\22\35\14\0\1\35\10\0\1\35\4\0\12\35"+
    "\3\0\23\35\1\370\4\35\14\0\1\35\10\0\1\35"+
    "\4\0\12\35\3\0\16\35\1\371\11\35\14\0\1\35"+
    "\10\0\1\35\4\0\12\35\3\0\7\35\1\372\20\35"+
    "\14\0\1\35\10\0\1\35\4\0\12\35\3\0\14\35"+
    "\1\373\13\35\14\0\1\35\10\0\1\35\4\0\12\35"+
    "\3\0\21\35\1\374\6\35\14\0\1\35\10\0\1\35"+
    "\4\0\12\35\3\0\2\35\1\375\25\35\14\0\1\35"+
    "\10\0\1\35\4\0\12\35\3\0\11\35\1\376\16\35"+
    "\14\0\1\35\10\0\1\35\4\0\12\35\3\0\24\35"+
    "\1\377\3\35\14\0\1\35\10\0\1\35\4\0\12\35"+
    "\3\0\24\35\1\u0100\3\35\14\0\1\35\10\0\1\35"+
    "\4\0\12\35\3\0\24\35\1\u0101\3\35\14\0\1\35"+
    "\10\0\1\35\4\0\12\35\3\0\17\35\1\u0102\10\35"+
    "\14\0\1\35\10\0\1\35\4\0\12\35\3\0\23\35"+
    "\1\u0103\4\35\14\0\1\35\10\0\1\35\4\0\12\35"+
    "\3\0\7\35\1\u0104\20\35\14\0\1\35\10\0\1\35"+
    "\4\0\5\35\1\u0105\4\35\3\0\30\35\14\0\1\35"+
    "\10\0\1\35\4\0\12\35\3\0\14\35\1\u0106\13\35"+
    "\14\0\1\35\10\0\1\35\4\0\12\35\3\0\16\35"+
    "\1\u0107\11\35\14\0\1\35\10\0\1\35\4\0\12\35"+
    "\3\0\23\35\1\u0108\4\35\14\0\1\35\10\0\1\35"+
    "\4\0\12\35\3\0\3\35\1\u0109\24\35\14\0\1\35"+
    "\10\0\1\35\4\0\12\35\3\0\5\35\1\u010a\22\35"+
    "\14\0\1\35\10\0\1\35\4\0\12\35\3\0\16\35"+
    "\1\u010b\11\35\14\0\1\35\10\0\1\35\4\0\12\35"+
    "\3\0\22\35\1\u010c\5\35\14\0\1\35\10\0\1\35"+
    "\4\0\12\35\3\0\15\35\1\u010d\12\35\14\0\1\35"+
    "\10\0\1\35\4\0\12\35\3\0\16\35\1\u010e\11\35"+
    "\14\0\1\35\10\0\1\35\4\0\12\35\3\0\5\35"+
    "\1\u010f\22\35\14\0\1\35\10\0\1\35\4\0\12\35"+
    "\3\0\7\35\1\u0110\20\35\14\0\1\35\10\0\1\35"+
    "\4\0\12\35\3\0\23\35\1\u0111\4\35\14\0\1\35"+
    "\10\0\1\35\4\0\12\35\3\0\1\35\1\u0112\26\35"+
    "\14\0\1\35\10\0\1\35\4\0\12\35\3\0\23\35"+
    "\1\u0113\4\35\14\0\1\35\10\0\1\35\4\0\12\35"+
    "\3\0\17\35\1\u0114\10\35\14\0\1\35\10\0\1\35"+
    "\4\0\12\35\3\0\14\35\1\u0115\13\35\14\0\1\35"+
    "\10\0\1\35\4\0\12\35\3\0\21\35\1\u0116\6\35"+
    "\2\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[11781];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\7\0\2\11\1\1\1\11\2\1\3\11\2\1\1\11"+
    "\1\1\1\11\2\1\1\11\6\1\2\11\21\1\3\11"+
    "\1\1\1\11\1\1\2\11\1\1\7\11\1\1\4\11"+
    "\1\1\20\11\1\0\3\11\110\1\1\0\45\1\1\0"+
    "\114\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[278];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char[] zzBuffer = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
  String pstring = "";
  final int unknown = -1;
  ComplexSymbolFactory.Location left = new ComplexSymbolFactory.Location(unknown, unknown);
  ComplexSymbolFactory cf = new ComplexSymbolFactory();
  public SymbolFactory getSymbolFactory() { return cf; }

  public int line_num() { return (yyline+1); }
  public ComplexSymbolFactory.Location left_loc() {
    return new ComplexSymbolFactory.Location(yyline+1, yycolumn+1, (int) yychar);
  }
  public ComplexSymbolFactory.Location right_loc() {
    ComplexSymbolFactory.Location left = left_loc();
  return new ComplexSymbolFactory.Location(left.getLine(), left.getColumn()+yylength(), left.getOffset()+yylength());
  }
  public String buff() {return new String(zzBuffer,zzCurrentPos,10).trim();}


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Yylex(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char[] newBuffer = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
            switch (zzLexicalState) {
            case CHAR: {
              throw new Error("Unterminated character literal at EOF, beginning at " + left.getLine() + ":" + left.getColumn());
            }  // fall though
            case 279: break;
            case CHARESC: {
              throw new Error("Unterminated character literal at EOF, beginning at " + left.getLine() + ":" + left.getColumn());
            }  // fall though
            case 280: break;
            case CHAREND: {
              throw new Error("Unterminated character literal at EOF, beginning at " + left.getLine() + ":" + left.getColumn());
            }  // fall though
            case 281: break;
            case STRING: {
              throw new Error("Unterminated string at EOF, beginning at " + left.getLine() + ":" + left.getColumn());
            }  // fall though
            case 282: break;
            case ESCAPED: {
              throw new Error("Unterminated string at EOF, beginning at " + left.getLine() + ":" + left.getColumn());
            }  // fall though
            case 283: break;
            default:
              {
                return cf.newSymbol("EOF", sym.EOF, left_loc(), left_loc());
              }
        }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { throw new Error("Illegal Character <"+yytext()+"> at "+(yyline+1)+":"+(yycolumn+1)+"("+yychar+")");
            }
            // fall through
          case 107: break;
          case 2:
            { /* ignore white space. */
            }
            // fall through
          case 108: break;
          case 3:
            { left = left_loc(); yybegin(STRING);
            }
            // fall through
          case 109: break;
          case 4:
            { return cf.newSymbol("", sym._SYMB_14, left_loc(), right_loc());
            }
            // fall through
          case 110: break;
          case 5:
            { left = left_loc(); yybegin(CHAR);
            }
            // fall through
          case 111: break;
          case 6:
            { return cf.newSymbol("", sym._SYMB_1, left_loc(), right_loc());
            }
            // fall through
          case 112: break;
          case 7:
            { return cf.newSymbol("", sym._SYMB_2, left_loc(), right_loc());
            }
            // fall through
          case 113: break;
          case 8:
            { return cf.newSymbol("", sym._SYMB_12, left_loc(), right_loc());
            }
            // fall through
          case 114: break;
          case 9:
            { return cf.newSymbol("", sym._SYMB_15, left_loc(), right_loc());
            }
            // fall through
          case 115: break;
          case 10:
            { return cf.newSymbol("", sym._SYMB_5, left_loc(), right_loc());
            }
            // fall through
          case 116: break;
          case 11:
            { return cf.newSymbol("", sym._SYMB_10, left_loc(), right_loc());
            }
            // fall through
          case 117: break;
          case 12:
            { return cf.newSymbol("", sym._SYMB_6, left_loc(), right_loc());
            }
            // fall through
          case 118: break;
          case 13:
            { return cf.newSymbol("", sym._SYMB_13, left_loc(), right_loc());
            }
            // fall through
          case 119: break;
          case 14:
            { return cf.newSymbol("", sym._INTEGER_, left_loc(), right_loc(), Integer.valueOf(yytext()));
            }
            // fall through
          case 120: break;
          case 15:
            { return cf.newSymbol("", sym._SYMB_0, left_loc(), right_loc());
            }
            // fall through
          case 121: break;
          case 16:
            { return cf.newSymbol("", sym._SYMB_16, left_loc(), right_loc());
            }
            // fall through
          case 122: break;
          case 17:
            { return cf.newSymbol("", sym._SYMB_9, left_loc(), right_loc());
            }
            // fall through
          case 123: break;
          case 18:
            { return cf.newSymbol("", sym._SYMB_17, left_loc(), right_loc());
            }
            // fall through
          case 124: break;
          case 19:
            { return cf.newSymbol("", sym._IDENT_, left_loc(), right_loc(), yytext().intern());
            }
            // fall through
          case 125: break;
          case 20:
            { return cf.newSymbol("", sym._SYMB_7, left_loc(), right_loc());
            }
            // fall through
          case 126: break;
          case 21:
            { return cf.newSymbol("", sym._SYMB_8, left_loc(), right_loc());
            }
            // fall through
          case 127: break;
          case 22:
            { return cf.newSymbol("", sym._SYMB_3, left_loc(), right_loc());
            }
            // fall through
          case 128: break;
          case 23:
            { return cf.newSymbol("", sym._SYMB_4, left_loc(), right_loc());
            }
            // fall through
          case 129: break;
          case 24:
            { /* skip */
            }
            // fall through
          case 130: break;
          case 25:
            { yybegin(CHAREND); return cf.newSymbol("", sym._CHAR_, left, right_loc(), Character.valueOf(yytext().charAt(0)));
            }
            // fall through
          case 131: break;
          case 26:
            { yybegin(CHARESC);
            }
            // fall through
          case 132: break;
          case 27:
            { throw new Error("Unterminated character literal on line " + left.getLine() + " beginning at column " + left.getColumn());
            }
            // fall through
          case 133: break;
          case 28:
            { yybegin(CHAREND); return cf.newSymbol("", sym._CHAR_, left, right_loc(), Character.valueOf('\f'));
            }
            // fall through
          case 134: break;
          case 29:
            { yybegin(CHAREND); return cf.newSymbol("", sym._CHAR_, left, right_loc(), Character.valueOf('\n'));
            }
            // fall through
          case 135: break;
          case 30:
            { yybegin(CHAREND); return cf.newSymbol("", sym._CHAR_, left, right_loc(), Character.valueOf('\r'));
            }
            // fall through
          case 136: break;
          case 31:
            { yybegin(CHAREND); return cf.newSymbol("", sym._CHAR_, left, right_loc(), Character.valueOf('\t'));
            }
            // fall through
          case 137: break;
          case 32:
            { yybegin(YYINITIAL);
            }
            // fall through
          case 138: break;
          case 33:
            { pstring += yytext();
            }
            // fall through
          case 139: break;
          case 34:
            { throw new Error("Unterminated string on line " + left.getLine() + " begining at column " + left.getColumn());
            }
            // fall through
          case 140: break;
          case 35:
            { String foo = pstring; pstring = ""; yybegin(YYINITIAL); return cf.newSymbol("", sym._STRING_, left, right_loc(), foo.intern());
            }
            // fall through
          case 141: break;
          case 36:
            { yybegin(ESCAPED);
            }
            // fall through
          case 142: break;
          case 37:
            { pstring += yytext(); yybegin(STRING);
            }
            // fall through
          case 143: break;
          case 38:
            { throw new Error("Unterminated string on line " + left.getLine() + " beginning at column " + left.getColumn());
            }
            // fall through
          case 144: break;
          case 39:
            { pstring += "\""; yybegin(STRING);
            }
            // fall through
          case 145: break;
          case 40:
            { pstring += "\\"; yybegin(STRING);
            }
            // fall through
          case 146: break;
          case 41:
            { pstring += "\f"; yybegin(STRING);
            }
            // fall through
          case 147: break;
          case 42:
            { pstring +=  "\n"; yybegin(STRING);
            }
            // fall through
          case 148: break;
          case 43:
            { pstring += "\r"; yybegin(STRING);
            }
            // fall through
          case 149: break;
          case 44:
            { pstring += "\t"; yybegin(STRING);
            }
            // fall through
          case 150: break;
          case 45:
            { return cf.newSymbol("", sym._SYMB_21, left_loc(), right_loc());
            }
            // fall through
          case 151: break;
          case 46:
            { yybegin(COMMENT);
            }
            // fall through
          case 152: break;
          case 47:
            { return cf.newSymbol("", sym._SYMB_24, left_loc(), right_loc());
            }
            // fall through
          case 153: break;
          case 48:
            { return cf.newSymbol("", sym._SYMB_11, left_loc(), right_loc());
            }
            // fall through
          case 154: break;
          case 49:
            { return cf.newSymbol("", sym._SYMB_22, left_loc(), right_loc());
            }
            // fall through
          case 155: break;
          case 50:
            { return cf.newSymbol("", sym._SYMB_27, left_loc(), right_loc());
            }
            // fall through
          case 156: break;
          case 51:
            { return cf.newSymbol("", sym._SYMB_25, left_loc(), right_loc());
            }
            // fall through
          case 157: break;
          case 52:
            { return cf.newSymbol("", sym._SYMB_28, left_loc(), right_loc());
            }
            // fall through
          case 158: break;
          case 53:
            { return cf.newSymbol("", sym._SYMB_26, left_loc(), right_loc());
            }
            // fall through
          case 159: break;
          case 54:
            { return cf.newSymbol("", sym._SYMB_23, left_loc(), right_loc());
            }
            // fall through
          case 160: break;
          case 55:
            { return cf.newSymbol("", sym._SYMB_18, left_loc(), right_loc());
            }
            // fall through
          case 161: break;
          case 56:
            { return cf.newSymbol("", sym._SYMB_20, left_loc(), right_loc());
            }
            // fall through
          case 162: break;
          case 57:
            { return cf.newSymbol("", sym._SYMB_19, left_loc(), right_loc());
            }
            // fall through
          case 163: break;
          case 58:
            { return cf.newSymbol("", sym._SYMB_30, left_loc(), right_loc());
            }
            // fall through
          case 164: break;
          case 59:
            { return cf.newSymbol("", sym._SYMB_47, left_loc(), right_loc());
            }
            // fall through
          case 165: break;
          case 60:
            { return cf.newSymbol("", sym._SYMB_48, left_loc(), right_loc());
            }
            // fall through
          case 166: break;
          case 61:
            { return cf.newSymbol("", sym._DOUBLE_, left_loc(), right_loc(), Double.valueOf(yytext()));
            }
            // fall through
          case 167: break;
          case 62:
            { return cf.newSymbol("", sym._SYMB_29, left_loc(), right_loc());
            }
            // fall through
          case 168: break;
          case 63:
            { return cf.newSymbol("", sym._SYMB_51, left_loc(), right_loc());
            }
            // fall through
          case 169: break;
          case 64:
            { return cf.newSymbol("", sym._SYMB_54, left_loc(), right_loc());
            }
            // fall through
          case 170: break;
          case 65:
            { return cf.newSymbol("", sym._SYMB_55, left_loc(), right_loc());
            }
            // fall through
          case 171: break;
          case 66:
            { return cf.newSymbol("", sym._SYMB_32, left_loc(), right_loc());
            }
            // fall through
          case 172: break;
          case 67:
            { return cf.newSymbol("", sym._SYMB_33, left_loc(), right_loc());
            }
            // fall through
          case 173: break;
          case 68:
            { return cf.newSymbol("", sym._SYMB_35, left_loc(), right_loc());
            }
            // fall through
          case 174: break;
          case 69:
            { return cf.newSymbol("", sym._SYMB_41, left_loc(), right_loc());
            }
            // fall through
          case 175: break;
          case 70:
            { return cf.newSymbol("", sym._SYMB_44, left_loc(), right_loc());
            }
            // fall through
          case 176: break;
          case 71:
            { return cf.newSymbol("", sym._SYMB_65, left_loc(), right_loc());
            }
            // fall through
          case 177: break;
          case 72:
            { return cf.newSymbol("", sym._SYMB_72, left_loc(), right_loc());
            }
            // fall through
          case 178: break;
          case 73:
            { return cf.newSymbol("", sym._SYMB_73, left_loc(), right_loc());
            }
            // fall through
          case 179: break;
          case 74:
            { return cf.newSymbol("", sym._SYMB_75, left_loc(), right_loc());
            }
            // fall through
          case 180: break;
          case 75:
            { return cf.newSymbol("", sym._SYMB_34, left_loc(), right_loc());
            }
            // fall through
          case 181: break;
          case 76:
            { return cf.newSymbol("", sym._SYMB_36, left_loc(), right_loc());
            }
            // fall through
          case 182: break;
          case 77:
            { return cf.newSymbol("", sym._SYMB_37, left_loc(), right_loc());
            }
            // fall through
          case 183: break;
          case 78:
            { return cf.newSymbol("", sym._SYMB_42, left_loc(), right_loc());
            }
            // fall through
          case 184: break;
          case 79:
            { return cf.newSymbol("", sym._SYMB_50, left_loc(), right_loc());
            }
            // fall through
          case 185: break;
          case 80:
            { return cf.newSymbol("", sym._SYMB_58, left_loc(), right_loc());
            }
            // fall through
          case 186: break;
          case 81:
            { return cf.newSymbol("", sym._SYMB_60, left_loc(), right_loc());
            }
            // fall through
          case 187: break;
          case 82:
            { return cf.newSymbol("", sym._SYMB_70, left_loc(), right_loc());
            }
            // fall through
          case 188: break;
          case 83:
            { return cf.newSymbol("", sym._SYMB_74, left_loc(), right_loc());
            }
            // fall through
          case 189: break;
          case 84:
            { return cf.newSymbol("", sym._SYMB_31, left_loc(), right_loc());
            }
            // fall through
          case 190: break;
          case 85:
            { return cf.newSymbol("", sym._SYMB_40, left_loc(), right_loc());
            }
            // fall through
          case 191: break;
          case 86:
            { return cf.newSymbol("", sym._SYMB_43, left_loc(), right_loc());
            }
            // fall through
          case 192: break;
          case 87:
            { return cf.newSymbol("", sym._SYMB_52, left_loc(), right_loc());
            }
            // fall through
          case 193: break;
          case 88:
            { return cf.newSymbol("", sym._SYMB_53, left_loc(), right_loc());
            }
            // fall through
          case 194: break;
          case 89:
            { return cf.newSymbol("", sym._SYMB_56, left_loc(), right_loc());
            }
            // fall through
          case 195: break;
          case 90:
            { return cf.newSymbol("", sym._SYMB_61, left_loc(), right_loc());
            }
            // fall through
          case 196: break;
          case 91:
            { return cf.newSymbol("", sym._SYMB_62, left_loc(), right_loc());
            }
            // fall through
          case 197: break;
          case 92:
            { return cf.newSymbol("", sym._SYMB_63, left_loc(), right_loc());
            }
            // fall through
          case 198: break;
          case 93:
            { return cf.newSymbol("", sym._SYMB_64, left_loc(), right_loc());
            }
            // fall through
          case 199: break;
          case 94:
            { return cf.newSymbol("", sym._SYMB_66, left_loc(), right_loc());
            }
            // fall through
          case 200: break;
          case 95:
            { return cf.newSymbol("", sym._SYMB_67, left_loc(), right_loc());
            }
            // fall through
          case 201: break;
          case 96:
            { return cf.newSymbol("", sym._SYMB_68, left_loc(), right_loc());
            }
            // fall through
          case 202: break;
          case 97:
            { return cf.newSymbol("", sym._SYMB_76, left_loc(), right_loc());
            }
            // fall through
          case 203: break;
          case 98:
            { return cf.newSymbol("", sym._SYMB_39, left_loc(), right_loc());
            }
            // fall through
          case 204: break;
          case 99:
            { return cf.newSymbol("", sym._SYMB_45, left_loc(), right_loc());
            }
            // fall through
          case 205: break;
          case 100:
            { return cf.newSymbol("", sym._SYMB_49, left_loc(), right_loc());
            }
            // fall through
          case 206: break;
          case 101:
            { return cf.newSymbol("", sym._SYMB_57, left_loc(), right_loc());
            }
            // fall through
          case 207: break;
          case 102:
            { return cf.newSymbol("", sym._SYMB_69, left_loc(), right_loc());
            }
            // fall through
          case 208: break;
          case 103:
            { return cf.newSymbol("", sym._SYMB_71, left_loc(), right_loc());
            }
            // fall through
          case 209: break;
          case 104:
            { return cf.newSymbol("", sym._SYMB_59, left_loc(), right_loc());
            }
            // fall through
          case 210: break;
          case 105:
            { return cf.newSymbol("", sym._SYMB_46, left_loc(), right_loc());
            }
            // fall through
          case 211: break;
          case 106:
            { return cf.newSymbol("", sym._SYMB_38, left_loc(), right_loc());
            }
            // fall through
          case 212: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
