// File generated by the BNF Converter (bnfc 2.9.4.1).

package lang;
/** Composition Visitor
*/

public class ComposVisitor<A> implements
  lang.Absyn.Program.Visitor<lang.Absyn.Program,A>,
  lang.Absyn.Stm.Visitor<lang.Absyn.Stm,A>,
  lang.Absyn.Item.Visitor<lang.Absyn.Item,A>,
  lang.Absyn.Stm_Initialise.Visitor<lang.Absyn.Stm_Initialise,A>,
  lang.Absyn.Stm_Declare.Visitor<lang.Absyn.Stm_Declare,A>,
  lang.Absyn.Stm_Assign.Visitor<lang.Absyn.Stm_Assign,A>,
  lang.Absyn.Stm_IncrmDecrm.Visitor<lang.Absyn.Stm_IncrmDecrm,A>,
  lang.Absyn.Stm_Loop.Visitor<lang.Absyn.Stm_Loop,A>,
  lang.Absyn.If_Stm.Visitor<lang.Absyn.If_Stm,A>,
  lang.Absyn.Arg.Visitor<lang.Absyn.Arg,A>,
  lang.Absyn.Exp.Visitor<lang.Absyn.Exp,A>,
  lang.Absyn.Assign_Op.Visitor<lang.Absyn.Assign_Op,A>,
  lang.Absyn.IncrmDecrm_Op.Visitor<lang.Absyn.IncrmDecrm_Op,A>,
  lang.Absyn.FuncType.Visitor<lang.Absyn.FuncType,A>,
  lang.Absyn.VarType.Visitor<lang.Absyn.VarType,A>,
  lang.Absyn.TypeCast.Visitor<lang.Absyn.TypeCast,A>
{
    /* Program */
    public lang.Absyn.Program visit(lang.Absyn.PStms p, A arg)
    {
      lang.Absyn.ListStm liststm_ = new lang.Absyn.ListStm();
      for (lang.Absyn.Stm x : p.liststm_)
      {
        liststm_.add(x.accept(this,arg));
      }
      return new lang.Absyn.PStms(liststm_);
    }
    public lang.Absyn.Program visit(lang.Absyn.PFunctionalModeStms p, A arg)
    {
      lang.Absyn.ListStm liststm_ = new lang.Absyn.ListStm();
      for (lang.Absyn.Stm x : p.liststm_)
      {
        liststm_.add(x.accept(this,arg));
      }
      return new lang.Absyn.PFunctionalModeStms(liststm_);
    }

    /* Stm */
    public lang.Absyn.Stm visit(lang.Absyn.DefFun p, A arg)
    {
      lang.Absyn.FuncType functype_ = p.functype_.accept(this, arg);
      String ident_ = p.ident_;
      lang.Absyn.ListArg listarg_ = new lang.Absyn.ListArg();
      for (lang.Absyn.Arg x : p.listarg_)
      {
        listarg_.add(x.accept(this,arg));
      }
      lang.Absyn.ListStm liststm_ = new lang.Absyn.ListStm();
      for (lang.Absyn.Stm x : p.liststm_)
      {
        liststm_.add(x.accept(this,arg));
      }
      return new lang.Absyn.DefFun(functype_, ident_, listarg_, liststm_);
    }
    public lang.Absyn.Stm visit(lang.Absyn.DefConstructor p, A arg)
    {
      String ident_ = p.ident_;
      lang.Absyn.ListArg listarg_ = new lang.Absyn.ListArg();
      for (lang.Absyn.Arg x : p.listarg_)
      {
        listarg_.add(x.accept(this,arg));
      }
      lang.Absyn.ListStm liststm_ = new lang.Absyn.ListStm();
      for (lang.Absyn.Stm x : p.liststm_)
      {
        liststm_.add(x.accept(this,arg));
      }
      return new lang.Absyn.DefConstructor(ident_, listarg_, liststm_);
    }
    public lang.Absyn.Stm visit(lang.Absyn.DefClass p, A arg)
    {
      String ident_ = p.ident_;
      lang.Absyn.ListStm liststm_ = new lang.Absyn.ListStm();
      for (lang.Absyn.Stm x : p.liststm_)
      {
        liststm_.add(x.accept(this,arg));
      }
      return new lang.Absyn.DefClass(ident_, liststm_);
    }
    public lang.Absyn.Stm visit(lang.Absyn.DefClassInherits p, A arg)
    {
      String ident_1 = p.ident_1;
      String ident_2 = p.ident_2;
      lang.Absyn.ListStm liststm_ = new lang.Absyn.ListStm();
      for (lang.Absyn.Stm x : p.liststm_)
      {
        liststm_.add(x.accept(this,arg));
      }
      return new lang.Absyn.DefClassInherits(ident_1, ident_2, liststm_);
    }
    public lang.Absyn.Stm visit(lang.Absyn.SPrint p, A arg)
    {
      lang.Absyn.Exp exp_ = p.exp_.accept(this, arg);
      return new lang.Absyn.SPrint(exp_);
    }
    public lang.Absyn.Stm visit(lang.Absyn.SBreak p, A arg)
    {
      return new lang.Absyn.SBreak();
    }
    public lang.Absyn.Stm visit(lang.Absyn.SContinue p, A arg)
    {
      return new lang.Absyn.SContinue();
    }
    public lang.Absyn.Stm visit(lang.Absyn.InitialiseStm p, A arg)
    {
      lang.Absyn.Stm_Initialise stm_initialise_ = p.stm_initialise_.accept(this, arg);
      return new lang.Absyn.InitialiseStm(stm_initialise_);
    }
    public lang.Absyn.Stm visit(lang.Absyn.DeclareStm p, A arg)
    {
      lang.Absyn.Stm_Declare stm_declare_ = p.stm_declare_.accept(this, arg);
      return new lang.Absyn.DeclareStm(stm_declare_);
    }
    public lang.Absyn.Stm visit(lang.Absyn.AssignStm p, A arg)
    {
      lang.Absyn.Stm_Assign stm_assign_ = p.stm_assign_.accept(this, arg);
      return new lang.Absyn.AssignStm(stm_assign_);
    }
    public lang.Absyn.Stm visit(lang.Absyn.LoopStm p, A arg)
    {
      lang.Absyn.Stm_Loop stm_loop_ = p.stm_loop_.accept(this, arg);
      return new lang.Absyn.LoopStm(stm_loop_);
    }
    public lang.Absyn.Stm visit(lang.Absyn.IncrnDecrmStm p, A arg)
    {
      lang.Absyn.Stm_IncrmDecrm stm_incrmdecrm_ = p.stm_incrmdecrm_.accept(this, arg);
      return new lang.Absyn.IncrnDecrmStm(stm_incrmdecrm_);
    }
    public lang.Absyn.Stm visit(lang.Absyn.SCall p, A arg)
    {
      lang.Absyn.Exp exp_ = p.exp_.accept(this, arg);
      return new lang.Absyn.SCall(exp_);
    }
    public lang.Absyn.Stm visit(lang.Absyn.SAppend p, A arg)
    {
      String ident_ = p.ident_;
      lang.Absyn.Exp exp_ = p.exp_.accept(this, arg);
      return new lang.Absyn.SAppend(ident_, exp_);
    }
    public lang.Absyn.Stm visit(lang.Absyn.SRemove p, A arg)
    {
      String ident_ = p.ident_;
      lang.Absyn.Exp exp_ = p.exp_.accept(this, arg);
      return new lang.Absyn.SRemove(ident_, exp_);
    }
    public lang.Absyn.Stm visit(lang.Absyn.SReturn p, A arg)
    {
      lang.Absyn.Exp exp_ = p.exp_.accept(this, arg);
      return new lang.Absyn.SReturn(exp_);
    }
    public lang.Absyn.Stm visit(lang.Absyn.SObjInit p, A arg)
    {
      String ident_1 = p.ident_1;
      String ident_2 = p.ident_2;
      lang.Absyn.ListExp listexp_ = new lang.Absyn.ListExp();
      for (lang.Absyn.Exp x : p.listexp_)
      {
        listexp_.add(x.accept(this,arg));
      }
      return new lang.Absyn.SObjInit(ident_1, ident_2, listexp_);
    }
    public lang.Absyn.Stm visit(lang.Absyn.SConstInit p, A arg)
    {
      lang.Absyn.VarType vartype_ = p.vartype_.accept(this, arg);
      String ident_ = p.ident_;
      lang.Absyn.Exp exp_ = p.exp_.accept(this, arg);
      return new lang.Absyn.SConstInit(vartype_, ident_, exp_);
    }
    public lang.Absyn.Stm visit(lang.Absyn.IfS p, A arg)
    {
      lang.Absyn.If_Stm if_stm_ = p.if_stm_.accept(this, arg);
      return new lang.Absyn.IfS(if_stm_);
    }
    public lang.Absyn.Stm visit(lang.Absyn.STryCatchFinally p, A arg)
    {
      lang.Absyn.ListStm liststm_1 = new lang.Absyn.ListStm();
      for (lang.Absyn.Stm x : p.liststm_1)
      {
        liststm_1.add(x.accept(this,arg));
      }
      String ident_ = p.ident_;
      lang.Absyn.ListStm liststm_2 = new lang.Absyn.ListStm();
      for (lang.Absyn.Stm x : p.liststm_2)
      {
        liststm_2.add(x.accept(this,arg));
      }
      lang.Absyn.ListStm liststm_3 = new lang.Absyn.ListStm();
      for (lang.Absyn.Stm x : p.liststm_3)
      {
        liststm_3.add(x.accept(this,arg));
      }
      return new lang.Absyn.STryCatchFinally(liststm_1, ident_, liststm_2, liststm_3);
    }
    public lang.Absyn.Stm visit(lang.Absyn.Block p, A arg)
    {
      lang.Absyn.ListStm liststm_ = new lang.Absyn.ListStm();
      for (lang.Absyn.Stm x : p.liststm_)
      {
        liststm_.add(x.accept(this,arg));
      }
      return new lang.Absyn.Block(liststm_);
    }

    /* Item */
    public lang.Absyn.Item visit(lang.Absyn.LstItem p, A arg)
    {
      lang.Absyn.Exp exp_ = p.exp_.accept(this, arg);
      return new lang.Absyn.LstItem(exp_);
    }

    /* Stm_Initialise */
    public lang.Absyn.Stm_Initialise visit(lang.Absyn.SInit p, A arg)
    {
      lang.Absyn.VarType vartype_ = p.vartype_.accept(this, arg);
      String ident_ = p.ident_;
      lang.Absyn.Exp exp_ = p.exp_.accept(this, arg);
      return new lang.Absyn.SInit(vartype_, ident_, exp_);
    }

    /* Stm_Declare */
    public lang.Absyn.Stm_Declare visit(lang.Absyn.SDecl p, A arg)
    {
      lang.Absyn.VarType vartype_ = p.vartype_.accept(this, arg);
      String ident_ = p.ident_;
      return new lang.Absyn.SDecl(vartype_, ident_);
    }

    /* Stm_Assign */
    public lang.Absyn.Stm_Assign visit(lang.Absyn.SAssign p, A arg)
    {
      String ident_ = p.ident_;
      lang.Absyn.Assign_Op assign_op_ = p.assign_op_.accept(this, arg);
      lang.Absyn.Exp exp_ = p.exp_.accept(this, arg);
      return new lang.Absyn.SAssign(ident_, assign_op_, exp_);
    }

    /* Stm_IncrmDecrm */
    public lang.Absyn.Stm_IncrmDecrm visit(lang.Absyn.SIncrmDecrm p, A arg)
    {
      String ident_ = p.ident_;
      lang.Absyn.IncrmDecrm_Op incrmdecrm_op_ = p.incrmdecrm_op_.accept(this, arg);
      return new lang.Absyn.SIncrmDecrm(ident_, incrmdecrm_op_);
    }

    /* Stm_Loop */
    public lang.Absyn.Stm_Loop visit(lang.Absyn.SWhile p, A arg)
    {
      lang.Absyn.Exp exp_ = p.exp_.accept(this, arg);
      lang.Absyn.ListStm liststm_ = new lang.Absyn.ListStm();
      for (lang.Absyn.Stm x : p.liststm_)
      {
        liststm_.add(x.accept(this,arg));
      }
      return new lang.Absyn.SWhile(exp_, liststm_);
    }
    public lang.Absyn.Stm_Loop visit(lang.Absyn.SPLoopIdent p, A arg)
    {
      String ident_1 = p.ident_1;
      String ident_2 = p.ident_2;
      lang.Absyn.ListStm liststm_ = new lang.Absyn.ListStm();
      for (lang.Absyn.Stm x : p.liststm_)
      {
        liststm_.add(x.accept(this,arg));
      }
      return new lang.Absyn.SPLoopIdent(ident_1, ident_2, liststm_);
    }
    public lang.Absyn.Stm_Loop visit(lang.Absyn.SPLoopList p, A arg)
    {
      String ident_ = p.ident_;
      lang.Absyn.ListItem listitem_ = new lang.Absyn.ListItem();
      for (lang.Absyn.Item x : p.listitem_)
      {
        listitem_.add(x.accept(this,arg));
      }
      lang.Absyn.ListStm liststm_ = new lang.Absyn.ListStm();
      for (lang.Absyn.Stm x : p.liststm_)
      {
        liststm_.add(x.accept(this,arg));
      }
      return new lang.Absyn.SPLoopList(ident_, listitem_, liststm_);
    }
    public lang.Absyn.Stm_Loop visit(lang.Absyn.SPLoopRangeStart p, A arg)
    {
      String ident_ = p.ident_;
      lang.Absyn.Exp exp_ = p.exp_.accept(this, arg);
      lang.Absyn.ListStm liststm_ = new lang.Absyn.ListStm();
      for (lang.Absyn.Stm x : p.liststm_)
      {
        liststm_.add(x.accept(this,arg));
      }
      return new lang.Absyn.SPLoopRangeStart(ident_, exp_, liststm_);
    }
    public lang.Absyn.Stm_Loop visit(lang.Absyn.SPLoopRangeStartStop p, A arg)
    {
      String ident_ = p.ident_;
      lang.Absyn.Exp exp_1 = p.exp_1.accept(this, arg);
      lang.Absyn.Exp exp_2 = p.exp_2.accept(this, arg);
      lang.Absyn.ListStm liststm_ = new lang.Absyn.ListStm();
      for (lang.Absyn.Stm x : p.liststm_)
      {
        liststm_.add(x.accept(this,arg));
      }
      return new lang.Absyn.SPLoopRangeStartStop(ident_, exp_1, exp_2, liststm_);
    }
    public lang.Absyn.Stm_Loop visit(lang.Absyn.SPLoopRangeStartStopEnd p, A arg)
    {
      String ident_ = p.ident_;
      lang.Absyn.Exp exp_1 = p.exp_1.accept(this, arg);
      lang.Absyn.Exp exp_2 = p.exp_2.accept(this, arg);
      lang.Absyn.Exp exp_3 = p.exp_3.accept(this, arg);
      lang.Absyn.ListStm liststm_ = new lang.Absyn.ListStm();
      for (lang.Absyn.Stm x : p.liststm_)
      {
        liststm_.add(x.accept(this,arg));
      }
      return new lang.Absyn.SPLoopRangeStartStopEnd(ident_, exp_1, exp_2, exp_3, liststm_);
    }
    public lang.Absyn.Stm_Loop visit(lang.Absyn.SCLoop p, A arg)
    {
      lang.Absyn.Stm_Initialise stm_initialise_ = p.stm_initialise_.accept(this, arg);
      lang.Absyn.Exp exp_ = p.exp_.accept(this, arg);
      lang.Absyn.Stm_IncrmDecrm stm_incrmdecrm_ = p.stm_incrmdecrm_.accept(this, arg);
      lang.Absyn.ListStm liststm_ = new lang.Absyn.ListStm();
      for (lang.Absyn.Stm x : p.liststm_)
      {
        liststm_.add(x.accept(this,arg));
      }
      return new lang.Absyn.SCLoop(stm_initialise_, exp_, stm_incrmdecrm_, liststm_);
    }
    public lang.Absyn.Stm_Loop visit(lang.Absyn.SCLoopAssign p, A arg)
    {
      lang.Absyn.Stm_Initialise stm_initialise_ = p.stm_initialise_.accept(this, arg);
      lang.Absyn.Exp exp_ = p.exp_.accept(this, arg);
      lang.Absyn.Stm_Assign stm_assign_ = p.stm_assign_.accept(this, arg);
      lang.Absyn.ListStm liststm_ = new lang.Absyn.ListStm();
      for (lang.Absyn.Stm x : p.liststm_)
      {
        liststm_.add(x.accept(this,arg));
      }
      return new lang.Absyn.SCLoopAssign(stm_initialise_, exp_, stm_assign_, liststm_);
    }

    /* If_Stm */
    public lang.Absyn.If_Stm visit(lang.Absyn.SIf p, A arg)
    {
      lang.Absyn.Exp exp_ = p.exp_.accept(this, arg);
      lang.Absyn.ListStm liststm_ = new lang.Absyn.ListStm();
      for (lang.Absyn.Stm x : p.liststm_)
      {
        liststm_.add(x.accept(this,arg));
      }
      return new lang.Absyn.SIf(exp_, liststm_);
    }
    public lang.Absyn.If_Stm visit(lang.Absyn.SIfElse p, A arg)
    {
      lang.Absyn.Exp exp_ = p.exp_.accept(this, arg);
      lang.Absyn.ListStm liststm_1 = new lang.Absyn.ListStm();
      for (lang.Absyn.Stm x : p.liststm_1)
      {
        liststm_1.add(x.accept(this,arg));
      }
      lang.Absyn.ListStm liststm_2 = new lang.Absyn.ListStm();
      for (lang.Absyn.Stm x : p.liststm_2)
      {
        liststm_2.add(x.accept(this,arg));
      }
      return new lang.Absyn.SIfElse(exp_, liststm_1, liststm_2);
    }
    public lang.Absyn.If_Stm visit(lang.Absyn.SIfElseIf p, A arg)
    {
      lang.Absyn.Exp exp_ = p.exp_.accept(this, arg);
      lang.Absyn.ListStm liststm_ = new lang.Absyn.ListStm();
      for (lang.Absyn.Stm x : p.liststm_)
      {
        liststm_.add(x.accept(this,arg));
      }
      lang.Absyn.If_Stm if_stm_ = p.if_stm_.accept(this, arg);
      return new lang.Absyn.SIfElseIf(exp_, liststm_, if_stm_);
    }

    /* Arg */
    public lang.Absyn.Arg visit(lang.Absyn.ArgDecl p, A arg)
    {
      lang.Absyn.VarType vartype_ = p.vartype_.accept(this, arg);
      String ident_ = p.ident_;
      return new lang.Absyn.ArgDecl(vartype_, ident_);
    }

    /* Exp */
    public lang.Absyn.Exp visit(lang.Absyn.EInt p, A arg)
    {
      Integer integer_ = p.integer_;
      return new lang.Absyn.EInt(integer_);
    }
    public lang.Absyn.Exp visit(lang.Absyn.ENegInt p, A arg)
    {
      Integer integer_ = p.integer_;
      return new lang.Absyn.ENegInt(integer_);
    }
    public lang.Absyn.Exp visit(lang.Absyn.EChar p, A arg)
    {
      Character char_ = p.char_;
      return new lang.Absyn.EChar(char_);
    }
    public lang.Absyn.Exp visit(lang.Absyn.EDouble p, A arg)
    {
      Double double_ = p.double_;
      return new lang.Absyn.EDouble(double_);
    }
    public lang.Absyn.Exp visit(lang.Absyn.ENegDouble p, A arg)
    {
      Double double_ = p.double_;
      return new lang.Absyn.ENegDouble(double_);
    }
    public lang.Absyn.Exp visit(lang.Absyn.EString p, A arg)
    {
      String string_ = p.string_;
      return new lang.Absyn.EString(string_);
    }
    public lang.Absyn.Exp visit(lang.Absyn.ETrue p, A arg)
    {
      return new lang.Absyn.ETrue();
    }
    public lang.Absyn.Exp visit(lang.Absyn.EFalse p, A arg)
    {
      return new lang.Absyn.EFalse();
    }
    public lang.Absyn.Exp visit(lang.Absyn.EId p, A arg)
    {
      String ident_ = p.ident_;
      return new lang.Absyn.EId(ident_);
    }
    public lang.Absyn.Exp visit(lang.Absyn.EListItem p, A arg)
    {
      String ident_ = p.ident_;
      lang.Absyn.Exp exp_ = p.exp_.accept(this, arg);
      return new lang.Absyn.EListItem(ident_, exp_);
    }
    public lang.Absyn.Exp visit(lang.Absyn.EList p, A arg)
    {
      lang.Absyn.ListItem listitem_ = new lang.Absyn.ListItem();
      for (lang.Absyn.Item x : p.listitem_)
      {
        listitem_.add(x.accept(this,arg));
      }
      return new lang.Absyn.EList(listitem_);
    }
    public lang.Absyn.Exp visit(lang.Absyn.EListSize p, A arg)
    {
      String ident_ = p.ident_;
      return new lang.Absyn.EListSize(ident_);
    }
    public lang.Absyn.Exp visit(lang.Absyn.EInput p, A arg)
    {
      return new lang.Absyn.EInput();
    }
    public lang.Absyn.Exp visit(lang.Absyn.ETypeCast p, A arg)
    {
      String ident_ = p.ident_;
      lang.Absyn.TypeCast typecast_ = p.typecast_.accept(this, arg);
      return new lang.Absyn.ETypeCast(ident_, typecast_);
    }
    public lang.Absyn.Exp visit(lang.Absyn.ELambda p, A arg)
    {
      lang.Absyn.ListArg listarg_ = new lang.Absyn.ListArg();
      for (lang.Absyn.Arg x : p.listarg_)
      {
        listarg_.add(x.accept(this,arg));
      }
      lang.Absyn.ListStm liststm_ = new lang.Absyn.ListStm();
      for (lang.Absyn.Stm x : p.liststm_)
      {
        liststm_.add(x.accept(this,arg));
      }
      return new lang.Absyn.ELambda(listarg_, liststm_);
    }
    public lang.Absyn.Exp visit(lang.Absyn.EMapIdent p, A arg)
    {
      lang.Absyn.Exp exp_ = p.exp_.accept(this, arg);
      String ident_ = p.ident_;
      return new lang.Absyn.EMapIdent(exp_, ident_);
    }
    public lang.Absyn.Exp visit(lang.Absyn.EMapList p, A arg)
    {
      lang.Absyn.Exp exp_ = p.exp_.accept(this, arg);
      lang.Absyn.ListItem listitem_ = new lang.Absyn.ListItem();
      for (lang.Absyn.Item x : p.listitem_)
      {
        listitem_.add(x.accept(this,arg));
      }
      return new lang.Absyn.EMapList(exp_, listitem_);
    }
    public lang.Absyn.Exp visit(lang.Absyn.EFilterIdent p, A arg)
    {
      lang.Absyn.Exp exp_ = p.exp_.accept(this, arg);
      String ident_ = p.ident_;
      return new lang.Absyn.EFilterIdent(exp_, ident_);
    }
    public lang.Absyn.Exp visit(lang.Absyn.EFilterList p, A arg)
    {
      lang.Absyn.Exp exp_ = p.exp_.accept(this, arg);
      lang.Absyn.ListItem listitem_ = new lang.Absyn.ListItem();
      for (lang.Absyn.Item x : p.listitem_)
      {
        listitem_.add(x.accept(this,arg));
      }
      return new lang.Absyn.EFilterList(exp_, listitem_);
    }
    public lang.Absyn.Exp visit(lang.Absyn.EReduceIdent p, A arg)
    {
      lang.Absyn.Exp exp_ = p.exp_.accept(this, arg);
      String ident_ = p.ident_;
      return new lang.Absyn.EReduceIdent(exp_, ident_);
    }
    public lang.Absyn.Exp visit(lang.Absyn.EReduceList p, A arg)
    {
      lang.Absyn.Exp exp_ = p.exp_.accept(this, arg);
      lang.Absyn.ListItem listitem_ = new lang.Absyn.ListItem();
      for (lang.Absyn.Item x : p.listitem_)
      {
        listitem_.add(x.accept(this,arg));
      }
      return new lang.Absyn.EReduceList(exp_, listitem_);
    }
    public lang.Absyn.Exp visit(lang.Absyn.ESelect p, A arg)
    {
      String ident_1 = p.ident_1;
      String ident_2 = p.ident_2;
      return new lang.Absyn.ESelect(ident_1, ident_2);
    }
    public lang.Absyn.Exp visit(lang.Absyn.ESelectListItem p, A arg)
    {
      String ident_1 = p.ident_1;
      String ident_2 = p.ident_2;
      lang.Absyn.Exp exp_ = p.exp_.accept(this, arg);
      return new lang.Absyn.ESelectListItem(ident_1, ident_2, exp_);
    }
    public lang.Absyn.Exp visit(lang.Absyn.ECall p, A arg)
    {
      String ident_ = p.ident_;
      lang.Absyn.ListExp listexp_ = new lang.Absyn.ListExp();
      for (lang.Absyn.Exp x : p.listexp_)
      {
        listexp_.add(x.accept(this,arg));
      }
      return new lang.Absyn.ECall(ident_, listexp_);
    }
    public lang.Absyn.Exp visit(lang.Absyn.EObjCall p, A arg)
    {
      String ident_1 = p.ident_1;
      String ident_2 = p.ident_2;
      lang.Absyn.ListExp listexp_ = new lang.Absyn.ListExp();
      for (lang.Absyn.Exp x : p.listexp_)
      {
        listexp_.add(x.accept(this,arg));
      }
      return new lang.Absyn.EObjCall(ident_1, ident_2, listexp_);
    }
    public lang.Absyn.Exp visit(lang.Absyn.EPow p, A arg)
    {
      lang.Absyn.Exp exp_1 = p.exp_1.accept(this, arg);
      lang.Absyn.Exp exp_2 = p.exp_2.accept(this, arg);
      return new lang.Absyn.EPow(exp_1, exp_2);
    }
    public lang.Absyn.Exp visit(lang.Absyn.EMul p, A arg)
    {
      lang.Absyn.Exp exp_1 = p.exp_1.accept(this, arg);
      lang.Absyn.Exp exp_2 = p.exp_2.accept(this, arg);
      return new lang.Absyn.EMul(exp_1, exp_2);
    }
    public lang.Absyn.Exp visit(lang.Absyn.EDiv p, A arg)
    {
      lang.Absyn.Exp exp_1 = p.exp_1.accept(this, arg);
      lang.Absyn.Exp exp_2 = p.exp_2.accept(this, arg);
      return new lang.Absyn.EDiv(exp_1, exp_2);
    }
    public lang.Absyn.Exp visit(lang.Absyn.EAdd p, A arg)
    {
      lang.Absyn.Exp exp_1 = p.exp_1.accept(this, arg);
      lang.Absyn.Exp exp_2 = p.exp_2.accept(this, arg);
      return new lang.Absyn.EAdd(exp_1, exp_2);
    }
    public lang.Absyn.Exp visit(lang.Absyn.ESub p, A arg)
    {
      lang.Absyn.Exp exp_1 = p.exp_1.accept(this, arg);
      lang.Absyn.Exp exp_2 = p.exp_2.accept(this, arg);
      return new lang.Absyn.ESub(exp_1, exp_2);
    }
    public lang.Absyn.Exp visit(lang.Absyn.ELt p, A arg)
    {
      lang.Absyn.Exp exp_1 = p.exp_1.accept(this, arg);
      lang.Absyn.Exp exp_2 = p.exp_2.accept(this, arg);
      return new lang.Absyn.ELt(exp_1, exp_2);
    }
    public lang.Absyn.Exp visit(lang.Absyn.EGt p, A arg)
    {
      lang.Absyn.Exp exp_1 = p.exp_1.accept(this, arg);
      lang.Absyn.Exp exp_2 = p.exp_2.accept(this, arg);
      return new lang.Absyn.EGt(exp_1, exp_2);
    }
    public lang.Absyn.Exp visit(lang.Absyn.ELEq p, A arg)
    {
      lang.Absyn.Exp exp_1 = p.exp_1.accept(this, arg);
      lang.Absyn.Exp exp_2 = p.exp_2.accept(this, arg);
      return new lang.Absyn.ELEq(exp_1, exp_2);
    }
    public lang.Absyn.Exp visit(lang.Absyn.EGEq p, A arg)
    {
      lang.Absyn.Exp exp_1 = p.exp_1.accept(this, arg);
      lang.Absyn.Exp exp_2 = p.exp_2.accept(this, arg);
      return new lang.Absyn.EGEq(exp_1, exp_2);
    }
    public lang.Absyn.Exp visit(lang.Absyn.EEq p, A arg)
    {
      lang.Absyn.Exp exp_1 = p.exp_1.accept(this, arg);
      lang.Absyn.Exp exp_2 = p.exp_2.accept(this, arg);
      return new lang.Absyn.EEq(exp_1, exp_2);
    }
    public lang.Absyn.Exp visit(lang.Absyn.ENEq p, A arg)
    {
      lang.Absyn.Exp exp_1 = p.exp_1.accept(this, arg);
      lang.Absyn.Exp exp_2 = p.exp_2.accept(this, arg);
      return new lang.Absyn.ENEq(exp_1, exp_2);
    }
    public lang.Absyn.Exp visit(lang.Absyn.EAnd p, A arg)
    {
      lang.Absyn.Exp exp_1 = p.exp_1.accept(this, arg);
      lang.Absyn.Exp exp_2 = p.exp_2.accept(this, arg);
      return new lang.Absyn.EAnd(exp_1, exp_2);
    }
    public lang.Absyn.Exp visit(lang.Absyn.EOr p, A arg)
    {
      lang.Absyn.Exp exp_1 = p.exp_1.accept(this, arg);
      lang.Absyn.Exp exp_2 = p.exp_2.accept(this, arg);
      return new lang.Absyn.EOr(exp_1, exp_2);
    }
    public lang.Absyn.Exp visit(lang.Absyn.EAssign p, A arg)
    {
      lang.Absyn.Exp exp_1 = p.exp_1.accept(this, arg);
      lang.Absyn.Assign_Op assign_op_ = p.assign_op_.accept(this, arg);
      lang.Absyn.Exp exp_2 = p.exp_2.accept(this, arg);
      return new lang.Absyn.EAssign(exp_1, assign_op_, exp_2);
    }

    /* Assign_Op */
    public lang.Absyn.Assign_Op visit(lang.Absyn.Assign p, A arg)
    {
      return new lang.Absyn.Assign();
    }
    public lang.Absyn.Assign_Op visit(lang.Absyn.AssignMul p, A arg)
    {
      return new lang.Absyn.AssignMul();
    }
    public lang.Absyn.Assign_Op visit(lang.Absyn.AssignDiv p, A arg)
    {
      return new lang.Absyn.AssignDiv();
    }
    public lang.Absyn.Assign_Op visit(lang.Absyn.AssignMod p, A arg)
    {
      return new lang.Absyn.AssignMod();
    }
    public lang.Absyn.Assign_Op visit(lang.Absyn.AssignAdd p, A arg)
    {
      return new lang.Absyn.AssignAdd();
    }
    public lang.Absyn.Assign_Op visit(lang.Absyn.AssignSub p, A arg)
    {
      return new lang.Absyn.AssignSub();
    }

    /* IncrmDecrm_Op */
    public lang.Absyn.IncrmDecrm_Op visit(lang.Absyn.Increment p, A arg)
    {
      return new lang.Absyn.Increment();
    }
    public lang.Absyn.IncrmDecrm_Op visit(lang.Absyn.Decrement p, A arg)
    {
      return new lang.Absyn.Decrement();
    }

    /* FuncType */
    public lang.Absyn.FuncType visit(lang.Absyn.FuncType_void p, A arg)
    {
      return new lang.Absyn.FuncType_void();
    }
    public lang.Absyn.FuncType visit(lang.Absyn.FuncTypeVarType p, A arg)
    {
      lang.Absyn.VarType vartype_ = p.vartype_.accept(this, arg);
      return new lang.Absyn.FuncTypeVarType(vartype_);
    }

    /* VarType */
    public lang.Absyn.VarType visit(lang.Absyn.VarType_int p, A arg)
    {
      return new lang.Absyn.VarType_int();
    }
    public lang.Absyn.VarType visit(lang.Absyn.VarType_double p, A arg)
    {
      return new lang.Absyn.VarType_double();
    }
    public lang.Absyn.VarType visit(lang.Absyn.VarType_bool p, A arg)
    {
      return new lang.Absyn.VarType_bool();
    }
    public lang.Absyn.VarType visit(lang.Absyn.VarType_char p, A arg)
    {
      return new lang.Absyn.VarType_char();
    }
    public lang.Absyn.VarType visit(lang.Absyn.VarType_string p, A arg)
    {
      return new lang.Absyn.VarType_string();
    }
    public lang.Absyn.VarType visit(lang.Absyn.VarType_auto p, A arg)
    {
      return new lang.Absyn.VarType_auto();
    }
    public lang.Absyn.VarType visit(lang.Absyn.VarType_func p, A arg)
    {
      return new lang.Absyn.VarType_func();
    }
    public lang.Absyn.VarType visit(lang.Absyn.VarType_object p, A arg)
    {
      return new lang.Absyn.VarType_object();
    }

    /* TypeCast */
    public lang.Absyn.TypeCast visit(lang.Absyn.TypeCast_toInt p, A arg)
    {
      return new lang.Absyn.TypeCast_toInt();
    }
    public lang.Absyn.TypeCast visit(lang.Absyn.TypeCast_toDouble p, A arg)
    {
      return new lang.Absyn.TypeCast_toDouble();
    }
    public lang.Absyn.TypeCast visit(lang.Absyn.TypeCast_toBool p, A arg)
    {
      return new lang.Absyn.TypeCast_toBool();
    }
    public lang.Absyn.TypeCast visit(lang.Absyn.TypeCast_toChar p, A arg)
    {
      return new lang.Absyn.TypeCast_toChar();
    }
    public lang.Absyn.TypeCast visit(lang.Absyn.TypeCast_toString p, A arg)
    {
      return new lang.Absyn.TypeCast_toString();
    }
}
